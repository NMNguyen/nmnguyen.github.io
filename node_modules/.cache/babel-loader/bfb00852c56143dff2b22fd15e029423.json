{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js!/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddStageModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddStageModal.vue","mtime":1557830879574},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PinelineState from \"../../../models/PipelineStage\";\nimport { mapGetters, mapActions } from 'vuex';\n\nvar _ = require('lodash');\n\nimport { messages } from \"../../../messages\";\nexport default {\n  name: \"AddStagePipeline\",\n  props: {\n    showModal: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'new'\n    },\n    stageData: {\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    },\n    titleStage: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      showModalAddState: false,\n      selectedOptionAction: null,\n      currentTitleStage: '',\n      currentState: null,\n      optionsAction: [{\n        value: null,\n        text: 'Available Stage Actions',\n        disabled: true\n      }, {\n        value: 'a',\n        text: 'Send Email/SMS'\n      }, {\n        value: 'b',\n        text: 'Send Questionnaire'\n      }, {\n        value: 'c',\n        text: 'Team Feedback'\n      }, {\n        value: 'd',\n        text: 'Candidate Scorecards'\n      }],\n      isErrorForm: {\n        stageNameInput: false,\n        stageType: false\n      },\n      isProcessing: false\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['cachePipeline', 'listPipelineStage', 'currentCompany'])),\n  methods: _objectSpread({}, mapActions(['currentPipeline', 'setCachePipeline', 'setListPipelineStage']), {\n    handleOpenModal: function () {\n      var _handleOpenModal = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.isErrorForm = {\n                  stageNameInput: false,\n                  stageType: false\n                };\n\n                if (!(this.listPipelineStage.length == 0)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return new PinelineState().getAllStages('default').then(function (data) {\n                  _this.setListPipelineStage(data);\n\n                  console.log(data);\n                });\n\n              case 4:\n                this.currentTitleStage = this.titleStage;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleOpenModal() {\n        return _handleOpenModal.apply(this, arguments);\n      }\n\n      return handleOpenModal;\n    }(),\n    saveChange: function saveChange() {\n      if (this.stageData == null) {\n        this.isErrorForm.stageType = true;\n      } else {\n        this.isErrorForm.stageType = false;\n      }\n\n      if (this.currentTitleStage.trim() == '') {\n        this.isErrorForm.stageNameInput = true;\n      } else {\n        this.isErrorForm.stageNameInput = false;\n      }\n\n      if (this.isErrorForm.stageType || this.isErrorForm.stageNameInput) {\n        return;\n      }\n\n      switch (this.type) {\n        case 'new':\n          this.createPipelineStage();\n          break;\n\n        case 'edit':\n          this.editPipelineStage();\n          break;\n      }\n    },\n    createPipelineStage: function createPipelineStage() {\n      var _newPipelineStage = {};\n\n      var lengthListStage = _.sumBy(this.cachePipeline.list_state, function (state) {\n        return state.showInPositionPipelineStageModal == true;\n      });\n\n      Object.assign(_newPipelineStage, this.stageData);\n      _newPipelineStage.title = this.currentTitleStage;\n      _newPipelineStage.id = '';\n      _newPipelineStage.pipeline_id = '';\n      _newPipelineStage.deleted = false;\n      _newPipelineStage.index = lengthListStage + 1;\n      _newPipelineStage.showInPositionPipelineStageModal = true;\n      this.cachePipeline.list_state.push(_newPipelineStage);\n      this.handleCloseModal();\n    },\n    editPipelineStage: function editPipelineStage() {\n      var _this2 = this;\n\n      var _newPipelineStage = {};\n      var findStageChanged = this.listPipelineStage.find(function (stage) {\n        return stage.stage_type == _this2.stageData.stage_type;\n      });\n      Object.assign(_newPipelineStage, findStageChanged);\n      _newPipelineStage.pipeline_id = this.stageData.pipeline_id;\n      _newPipelineStage.id = this.stageData.id;\n      _newPipelineStage.title = this.currentTitleStage;\n      _newPipelineStage.deleted = false;\n      _newPipelineStage.index = this.stageData.index;\n      _newPipelineStage.showInPositionPipelineStageModal = true;\n      this.cachePipeline.list_state.splice(this.stageData.indexInCurrentArray, 1, _newPipelineStage);\n      this.setCachePipeline(this.cachePipeline);\n      this.handleCloseModal();\n    },\n    handleCloseModal: function handleCloseModal() {\n      this.$emit('handleClose');\n    }\n  })\n};",null]}