{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue","mtime":1557830879574},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport draggable from 'vuedraggable';\nimport Vue from \"vue\";\nimport {fauth} from '@/firebase';\nimport {mapGetters, mapActions} from 'vuex';\nimport AddStageModal from './AddStageModal.vue';\nimport Pipeline from \"@/models/Pipeline\";\nimport PipelineStage from \"@/models/PipelineStage\";\nimport {Component, Prop, Emit} from \"vue-property-decorator\";\nimport UnSavedChangeModal from '@/components/modals/PinelineStage/UnsavedChange.vue';\nimport {\n    State,\n    Getter,\n    Action,\n    Mutation,\n    namespace\n} from 'vuex-class'\nimport {messages} from \"@/messages\";\n\nconst _ = require('lodash');\n@Component({\n    components: {\n        UnSavedChangeModal,\n        AddStageModal,\n        draggable,\n    },\n    computed: {\n        // mix the getters into computed with object spread operator\n        ...mapGetters([\n            'currentCompany',\n            'listPipelineStage',\n            'listPipeline',\n            'cachePipeline',\n            'currentPipeline'\n        ]),\n        disabledInputTitle(){\n            let that = this as any;\n            return that.type == 'edit' && that.currentPipeline.is_default == true;\n        }\n    },\n    methods: {\n        ...mapActions('action', [\n            'setListPipelineStage',\n            'setListPipeline',\n            'setCachePipeline',\n            'setCurrentPipeline'\n        ]),\n    },\n})\nexport default class AddEditPipeline extends Vue {\n    @Prop(Boolean) showModal: false;\n    @Prop(String) type: 'new';\n    @Prop(Number) index: 1;\n\n    @Getter('cachePipeline') cachePipeline;\n    @Getter('currentPipeline') currentPipeline;\n    @Getter('listPipeline') listPipeline;\n    @Getter('listPipelineStage') listPipelineStage;\n    @Getter('currentCompany') currentCompany;\n\n    @Action('setListStage') setListStage;\n    @Action('setListPipeline') setListPipeline;\n    @Action('setCachePipeline') setCachePipeline;\n    @Action('setCurrentPipeline') setCurrentPipeline;\n    @Action('setListStageToPipeline') setListStageToPipeline;\n\n    showModalAddState: boolean = false;\n    title: string = '';\n    showModalUnSavedChange: boolean = false;\n    drag: boolean = false;\n    titleState: string = '';\n    currentState: object = {};\n    newPositionPipeline: object = {} as Pipeline || {};\n    typeOfModalAddPipelineStage: string = 'new';\n    isErrorInput: boolean = false;\n    isProcessing: boolean = false;\n    isSavedChange: boolean = false;\n    cloneListPipelineStage: Array<object> = [];\n\n    changeIndexListStage() {\n        // let lengthDefaultStage = _.sumBy(this.cachePipeline.list_state, (stage) => {\n        //     return stage.index == 0;\n        // })\n        Object.freeze(this.listPipelineStage)\n        this.cachePipeline.list_state.map((stage, index) => {\n            if (stage.index > 0) {\n                stage.index = index;\n            }\n            return stage;\n        })\n    }\n\n    onMove({relatedContext, draggedContext}) {\n        const relatedElement = relatedContext.element;\n        const draggedElement = draggedContext.element;\n        let indexRelatedElement = relatedElement.index;\n        let indexDraggedElement = draggedElement.index;\n        console.log(draggedElement.title, 'to', indexRelatedElement)\n        console.log(relatedElement.title, 'to', indexDraggedElement)\n        relatedElement.index = indexDraggedElement;\n        draggedElement.index = indexRelatedElement;\n        return (\n            (!relatedElement || !relatedElement.fixed) && !draggedElement.fixed\n        );\n    }\n\n    dragOptions() {\n        return {\n            animation: 0,\n            group: \"description\",\n            ghostClass: \"ghost\"\n        };\n    }\n\n    handleSaveChange() {\n        this.showModalUnSavedChange = false;\n        this.isSavedChange = true;\n        this.saveChange();\n    }\n\n    handleCloseUnSavedChange() {\n        this.showModalUnSavedChange = false;\n        this.$emit('handleClose');\n    }\n\n    async saveChange() {\n        if (this.title.trim() == '') {\n            this.isErrorInput = true;\n            return;\n        } else {\n            this.isErrorInput = false;\n        }\n        this.isProcessing = true;\n        switch (String(this.type)) {\n            case 'new':\n                await this.createNewPipeline();\n                break;\n            case 'edit':\n                await this.editPipeline();\n                break;\n        }\n        this.isProcessing = false;\n        this.isSavedChange = true;\n        await this.handleCloseModal();\n    }\n\n    editPipeline() {\n        return new Promise(async (resolve, reject) => {\n            this.cachePipeline.title = this.title;\n            this.changeIndexListStage();\n            const pArray = await this.cachePipeline.list_state.map(async (stage) => {\n                if (stage.id == '') {\n                    let _newStage = new PipelineStage();\n                    Object.assign(_newStage, stage);\n                    _newStage.pipeline_id = this.currentPipeline.id;\n                    await _newStage.insert().then((data) => {\n                        stage.id = data.id;\n                        stage.pipeline_id = data['pipeline_id'];\n                    })\n                } else {\n                    await new PipelineStage().getById(stage.id).then((data) => {\n                        Object.assign(data, stage);\n                        data['index'] = stage.index;\n                        if (data['title'] != stage.title) {\n                            data['title'] = stage.title;\n                        }\n                        if (data['stage_type'] != stage.stage_type) {\n                            data['stage_type'] = stage.stage_type;\n                        }\n                        data.update();\n                    })\n                }\n                if (stage.deleted == true) {\n                    await new PipelineStage().getById(stage.id).then((data) => {\n                        data.delete();\n                        console.log('Done ', stage.title);\n                    })\n                }\n                return stage;\n            });\n            await Promise.all(pArray);\n            this.cachePipeline.list_state = this.cachePipeline.list_state.filter((stage) => {\n                return !stage.deleted;\n            })\n            new Pipeline().getById(this.currentPipeline.id).then((data) => {\n                Object.assign(data, this.cachePipeline);\n                delete data['list_state'];\n                data.update().then((_data) => {\n                    this.listPipeline.splice(this.index, 1, data);\n                    this.setListPipeline(this.listPipeline);\n                    resolve();\n                });\n            });\n        })\n\n\n    }\n\n    createNewPipeline() {\n        return new Promise(async (resolve, reject) => {\n            this.newPositionPipeline = new Pipeline();\n            this.changeIndexListStage();\n            Object.assign(this.newPositionPipeline, this.cachePipeline);\n            this.newPositionPipeline['title'] = this.title;\n            delete this.newPositionPipeline['list_state'];\n            //@ts-ignore\n            this.newPositionPipeline.insert()\n                .then(async (data) => {\n                    const pArray = this.cachePipeline.list_state.map(async (stage) => {\n                        if (stage.pipeline_id == '') stage.pipeline_id = data.id;\n                        if ((stage.id == '' || stage.pipeline_id == 'default') && !stage.deleted) {\n                            let _newStage = new PipelineStage();\n                            Object.assign(_newStage, stage);\n                            _newStage.pipeline_id = data.id;\n                            await _newStage.insert().then((_data) => {\n                                stage.id = _data.id;\n                            })\n                        }\n                        return stage;\n                    });\n                    await Promise.all(pArray);\n                    //@ts-ignore\n                    this.newPositionPipeline.update().then((data) => {\n                        let _array = this.listPipeline.concat(data);\n                        this.setListPipeline(_array);\n                        resolve();\n                    })\n                })\n        })\n\n    }\n\n    async _getAllStages(type) {\n        return new PipelineStage().getAllStages(type);\n    }\n\n    async handleOpenModal() {\n        let _data = {};\n        this.isErrorInput = false;\n        // this.changeIndexListStage();\n\n        // Use cloneDeep cuz remove Observer Property in Object.\n        if (String(this.type) == 'new') {\n            _data = {\n                company_id: this.currentCompany.id,\n                list_state: _.cloneDeep(this.listPipelineStage),\n                title: '',\n            };\n            this.cloneListPipelineStage = _.cloneDeep(this.listPipelineStage);\n            this.title = '';\n        } else {\n            await this._getAllStages(this.currentPipeline.id).then((data) => {\n                _data = {\n                    company_id: this.currentCompany.id,\n                    list_state: data,\n                };\n                this.title = this.currentPipeline.title;\n                this.cloneListPipelineStage = _.cloneDeep(data);\n            });\n            // alert(this.title);\n            await this.setListStageToPipeline({id: this.currentPipeline.id, content: _data['list_state']});\n        }\n        await this.setCachePipeline(_data);\n        await console.log(_data)\n    }\n\n    removePipelineStage(index) {\n        this.cachePipeline.list_state[index]['deleted'] = true;\n        this.cachePipeline.list_state.splice(index, 1, this.cachePipeline.list_state[index]);\n        this.setCachePipeline(this.cachePipeline);\n    }\n\n    handleOpenModalAddStage(type, state, index) {\n        this.showModalAddState = true;\n        this.typeOfModalAddPipelineStage = type;\n        if (type == 'new') {\n            this.currentState = null;\n            this.titleState = '';\n        } else {\n            this.currentState = state;\n            // indexInCurrentArray is position of this item in list_state of state\n            this.currentState['indexInCurrentArray'] = index;\n            this.titleState = this.currentState['title'];\n        }\n    }\n\n    handleCloseModal() {\n        let compareTitle = '';\n        let compareStage = false;\n        if (!this.isSavedChange) {\n            this.cloneListPipelineStage.forEach((stage) => {\n                delete stage['firestore'];\n                delete stage['updatedAt'];\n                delete stage['createdAt'];\n            })\n            let checkArray = [];\n            if (this.type == 'new') {\n                compareTitle = this.cachePipeline.title;\n                checkArray = _.cloneDeep(this.cachePipeline.list_state)\n                checkArray.forEach((stage) => {\n                    delete stage['firestore'];\n                    delete stage['updatedAt'];\n                    delete stage['createdAt'];\n                })\n                compareStage =  _.isMatch(this.cloneListPipelineStage, checkArray)\n            } else {\n                compareTitle = this.currentPipeline.title;\n                checkArray = _.cloneDeep(this.currentPipeline.list_state)\n                checkArray.forEach((stage) => {\n                    delete stage['firestore'];\n                    delete stage['updatedAt'];\n                    delete stage['createdAt'];\n                })\n                console.log(this.cloneListPipelineStage)\n                compareStage =  _.isMatch(this.cloneListPipelineStage, checkArray, _.isEqual)\n            }\n\n\n            // Compare\n            if (!compareStage || this.title != compareTitle){\n                this.showModalUnSavedChange = true;\n                return;\n            }\n        }\n        this.showModalUnSavedChange = false;\n        this.title = '';\n        this.isSavedChange = false;\n        this.$emit('handleClose')\n    }\n}\n",null]}