{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/settings/UserProfile.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/settings/UserProfile.vue","mtime":1557830879582},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport User from \"@/models/User\";\nimport {fstorage} from '@/firebase';\nimport {mapGetters} from 'vuex';\n\n\nexport default Vue.extend({\n\n    name: \"UserProfile\",\n\n    data() {\n        return {\n            email: \"\",\n            username: \"\",\n            name: \"\",\n            saveflag: false,\n            whichFile: \"\",\n            upload: {} as firebase.storage.UploadTask,\n            photoURL: \"\",\n            filename: \"\",\n            fileupload: {},\n            flag_upload: false,\n            errorMessage: \"\",\n            error:false,\n\n\n        }\n    },\n    computed: {\n        // mix the getters into computed with object spread operator\n        ...mapGetters([\n            'currentUser',\n            'currentCompany',\n            // ...\n        ]),\n    },\n    watch: {\n        currentUser: function (user) {\n            const self = this;\n            self.name = user.name;\n            self.photoURL = user.photoURL;\n        }\n    },\n    mounted: function () {\n\n        const self = this;\n\n        if (self.currentUser) {\n            self.name = self.currentUser.name;\n            if (self.currentUser.photoURL)\n                self.photoURL = self.currentUser.photoURL;\n        }\n\n\n    },\n    methods: {\n        validate: function () {\n            const self = this;\n            let flag = true;\n            self.error = false;\n            self.errorMessage = \"\";\n            self.name = self.name.trim();\n\n            if (self.name == \"\") {\n                self.errorMessage = \"Tên người dùng không được để trống !\";\n                flag = false;\n                self.error = true;\n            }\n\n            return flag;\n\n        },\n        SaveUser: function () {\n            const self = this;\n            if ((self.currentUser) && (self.validate())) {\n                self.currentUser.name = self.name;\n\n                if (self.flag_upload) {\n                    self.$toasted.show(self.messages.SR_001_UPLOADING);\n                    const filenameup = self.currentUser.email + '-' + self.stringGen(10) + self.currentUser.id + '-' + self.filename;\n                    self.upload = fstorage.ref('image/avatar/' + self.currentUser.id + '/' + filenameup).put(self.fileupload);\n                    self.upload.on('state_changed', sp => {\n                            if (sp.bytesTransferred == sp.totalBytes) {\n                                this.$toasted.show(self.messages.SR_001_UPLOADED);\n                            }\n                        },\n                        null,\n                        () => {\n                            self.upload.snapshot.ref.getDownloadURL().then(downloadURL => {\n                                const oldavatar = self.currentUser.photoName;\n\n                                self.currentUser.photoURL = downloadURL;\n                                self.currentUser.photoName = filenameup;\n\n                                console.log(downloadURL);\n                                self.currentUser.update();\n\n                                if ((oldavatar) && (oldavatar != '')) {\n                                    var desertRef = fstorage.ref().child('image/avatar/' + self.currentUser.id + '/' + oldavatar);\n                                    desertRef.delete().then(function () {\n                                        // File deleted successfully\n                                    }).catch(function (error) {\n                                        console.log(error);\n                                    });\n                                }\n\n\n                            })\n                        })\n\n                }\n\n\n                self.currentUser.update();\n                self.saveflag = true;\n\n                setTimeout(function () {\n                    self.saveflag = false;\n                }, 2000);\n            }\n\n        },\n        createImage(file) {\n            let reader = new FileReader();\n            let self = this;\n            self.filename = file.name;\n\n            reader.onload = (e: Event) => {\n                self.photoURL = reader.result as string;\n            };\n            reader.readAsDataURL(file);\n        },\n        detectFiles(fileList, whichFile) {\n            const self = this;\n            self.flag_upload = false;\n            self.whichFile = whichFile;\n            console.log(fileList);\n            if (fileList.length == 1) {\n                if (fileList[0].type.indexOf(\"image\") == -1) {\n                    this.$toasted.error('Chỉ được up file ảnh !');\n                } else {\n                    self.createImage(fileList[0]);\n                    self.fileupload = fileList[0];\n                    self.flag_upload = true;\n                }\n            }\n        },\n        stringGen(len) {\n            let text = \" \";\n\n            let charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n\n            for (var i = 0; i < len; i++)\n                text += charset.charAt(Math.floor(Math.random() * charset.length));\n\n            return text;\n\n        },\n    }\n});\n\n",null]}