{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/tasks/TaskPage.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/tasks/TaskPage.vue","mtime":1557830879585},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from 'vue';\nimport {Datetime} from 'vue-datetime';\nimport Moment from 'moment';\nimport Task from '@/models/Task';\nimport {mapGetters, mapMutations} from 'vuex';\nimport {VclCode, VclFacebook} from 'vue-content-loading';\nimport ModalWrapper from \"@/components/ModalWrapper.vue\";\n\n\nexport default Vue.extend({\n    name: 'home',\n    components: {\n        datetime: Datetime,\n        VclCode,\n        VclFacebook,\n        ModalWrapper,\n    },\n\n    computed: {\n        // mix the getters into computed with object spread operator\n        ...mapGetters([\n            'currentUser',\n            'currentCompany',\n            'getTask'\n            // ...\n        ]),\n\n    },\n    // watch: {\n    //     getTask(val, oldVal) {\n    //         // console.log(val);\n    //         this.getAllTask();\n    //     }\n    // },\n    data() {\n        return {\n            loading: true,\n            taskGroupOrder: ['overdue', 'today', 'upcoming', 'complete'],\n            tasks: {\n                overdue: [] as Task[],\n                today: [] as Task[],\n                upcoming: [] as Task[],\n                complete: [] as Task[],\n            },\n            currentTask: new Task() as Task,\n        }\n    },\n    created() {\n        console.log('get task before');\n        this.getAllTask();\n\n        this.$store.subscribe((mutation, state) => {\n            if (mutation.type == \"clearCurrentTask\") {\n                this.getAllTask();\n            }\n        })\n\n    },\n\n    methods: {\n        ...mapMutations(['updateCurrentTask', 'modals/showAddTask']\n        ),\n        showCurrentTask(task: Task) {\n            this.currentTask = task;\n        },\n        deleteTask(task) {\n\n            let self = this;\n\n            // Trigger a confirmation dialog\n            this.$dialog\n                .confirm('Bạn có chắc chắn?', {okText: \"Xóa ngay\", cancelText: \"Thoát\"})\n                .then(function (dialog) {\n                    task.delete().then(data => {\n                        self.getAllTask();\n\n                    })\n                })\n                .catch(function () {\n                    console.log('Clicked on cancel');\n                });\n        },\n        async getAllTask() {\n            for (const group in this.tasks) {\n                this.tasks[group] = [];\n            }\n            const tasks = await Task.instance.getAllTasks();\n            tasks.forEach(task=>{\n                const due = Moment(task.deadline);\n                const today = Moment(Date.now());\n\n                if (task.is_done) {\n                    this.tasks.complete.push(task);\n                } else if (due.isBefore(today)) {\n                    this.tasks.overdue.push(task);\n                } else if (due.isAfter(today)) {\n                    this.tasks.upcoming.push(task);\n                } else {\n                    this.tasks.today.push(task);\n                }\n            });\n            if (tasks.length > 0) {\n                this.currentTask = tasks[0];\n            }\n            this.loading = false;\n        },\n        showAddTask(): void {\n            this['modals/showAddTask'](true);\n        },\n    }\n});\n",{"version":3,"sources":["TaskPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TaskPage.vue","sourceRoot":"src/components/tasks","sourcesContent":["<template>\n    <div class=\"d-flex flex-column\" style=\"height: 100%;\">\n        <header class=\"flex-shrink-0\">\n            <div class=\"p-4\">\n                <b-dropdown text=\"Công việc được giao cho tôi\" variant=\"custom-bg-color\" class=\"mr-5\">\n                    <b-dropdown-item>Công việc được giao cho tôi</b-dropdown-item>\n                    <b-dropdown-item>Công việc tôi đã giao</b-dropdown-item>\n                </b-dropdown>\n                <b-dropdown no-caret variant=\"custom-bg-color\">\n                    <template slot=\"button-content\">\n                        <i class=\"fas fa-cog\"></i>\n                    </template>\n                    <b-dropdown-item>Công việc chưa hoàn thành</b-dropdown-item>\n                    <b-dropdown-item>Công việc đã hoàn thành</b-dropdown-item>\n                    <b-dropdown-item>Tất cả các công việc</b-dropdown-item>\n                </b-dropdown>\n                <b-button variant=\"blue\" @click=\"showAddTask\">\n                    <i class=\"fas fa-plus\"></i>\n                </b-button>\n            </div>\n        </header>\n        <!-- Task content -->\n        <div class=\"d-flex flex-grow-1 overflow-auto p-4 tasks-stream\">\n            <!-- Left border -->\n            <div v-if=\"loading\" class=\"tasks-content\">\n                <vcl-code></vcl-code>\n            </div>\n            <div v-else class=\"tasks-content flex-shrink-0\">\n                <div class=\"tasks-section\" v-for=\"(group, idx) in taskGroupOrder\" :key=\"idx\"\n                     v-show=\"tasks[group].length > 0\">\n                    <h2 :class=\"group\">{{group.toUpperCase()}}</h2>\n                    <ul class=\"activity-stream task-list\">\n                        <li class=\"activity-container\"\n                            v-for=\"task in tasks[group]\"\n                            :class=\"{selected: task.id === currentTask.id, [`task-${group}`]: true}\">\n                            <div @click=\"showCurrentTask(task)\">\n                                <div class=\"activity task\" :id=\"task.id\">\n                                    <div class=\"activity-type\" v-show=\"task.is_done\">\n                                        <i class=\"fas fa-check inactive\"></i>\n                                    </div>\n                                    <div class=\"activity-type\" v-show=\"!task.is_done\" @click=\"completeTask(task)\">\n                                        <i class=\"ng-hide fas fa-check inactive\"></i>\n                                        <i class=\"ng-hide fas fa-refresh fa-spin active\"></i>\n                                    </div>\n                                    <div>\n                                        <div class=\"activity-object ng-scope\">\n                                            <div class=\"activity-info\">\n                                                <div class=\"activity-body\">\n                                                    <p class=\"title\">{{task.title}}</p>\n                                                    <ul class=\"actions\">\n                                                        <li class=\"action\">\n                                                            <span class=\"datetime\">\n                                                                <i class=\"fa fa-clock\"></i>\n                                                                <span>Due </span>\n                                                                <span class=\"ng-binding\">{{new Date(task.deadline).toLocaleString()}}</span>\n                                                            </span>\n                                                        </li>\n                                                        <li class=\"action\">\n                                                            <span>\n                                                                <i class=\"fa fa-user\"></i>\n                                                                <span v-if=\"task.assignee\">{{task.assignee.name}}</span>\n                                                            </span>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div><!-- end ngRepeat: group in taskGroupOrder -->\n            </div>\n            <!-- Right border -->\n            <div class=\"flex-grow-1 overflow-auto ml-4 bg-light\">\n                <div style=\"background-color: white; padding: 20px;\" v-if=\"!currentTask.id\">\n                    <vcl-facebook></vcl-facebook>\n                </div>\n\n                <!-- Upcoming task 1 -->\n                <div v-if=\"currentTask.id\" style=\"height: 100%\" class=\"border p-3 text-secondary rounded\">\n                    <!-- Header -->\n                    <div class=\"d-flex align-items-center\">\n                        <div class=\"task-check mx-2 flex-shrink-0\" title=\"Đánh dấu đã hoàn thành\">\n                            <i class=\"fas fa-check\"></i>\n                        </div>\n                        <div class=\"flex-grow-1\">\n                            <h5 class=\"my-0\">\n                                <b>{{ currentTask.title }}</b>\n                            </h5>\n                            <small>\n                                <strong>Giao cho:</strong> {{ currentTask.assignee.name }}\n                            </small>\n                            <i class=\"fas fa-clock ml-2\"></i>\n                            <small>\n                                <strong> Thời hạn:</strong> {{ new Date(currentTask.deadline).toLocaleString() }}\n                            </small>\n                            <!--                                <a class=\"mr-10\" href=\"#\">Xem Ứng Viên</a>-->\n                        </div>\n                        <div class=\"col-1\">\n                            <b-dropdown no-caret variant=\"custom-bg-color\">\n                                <template slot=\"button-content\">\n                                    <i class=\"fas fa-ellipsis-v\"></i>\n                                </template>\n                                <b-dropdown-item @click=\"updateCurrentTask(currentTask)\">Chỉnh sửa</b-dropdown-item>\n                                <b-dropdown-item @click=\"deleteTask(currentTask)\">Xóa</b-dropdown-item>\n                            </b-dropdown>\n                        </div>\n                    </div>\n                    <hr>\n                    <!-- Content -->\n                    <div class=\"container\">\n                        <h6>{{ currentTask.description}}</h6>\n                        <div class=\"row\">\n                            <div class=\"col-1 d-flex align-items-center\">\n                                <i class=\"fas fa-hospital-symbol fa-2x text-success\"></i>\n                            </div>\n                            <div class=\"col-10 container px-0\">\n                                <h6 class=\"my-0\">\n                                    <b>{{currentTask.assignee.name}}</b>\n                                    <small> tạo công việc</small>\n                                </h6>\n                                <br>\n                                <small>22h trước</small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\">\n    @import \"~styles/_task.scss\";\n    @import \"~styles/position_activity\";\n    @import \"~styles/stream\";\n</style>\n\n\n<script lang=\"ts\">\n    import Vue from 'vue';\n    import {Datetime} from 'vue-datetime';\n    import Moment from 'moment';\n    import Task from '@/models/Task';\n    import {mapGetters, mapMutations} from 'vuex';\n    import {VclCode, VclFacebook} from 'vue-content-loading';\n    import ModalWrapper from \"@/components/ModalWrapper.vue\";\n\n\n    export default Vue.extend({\n        name: 'home',\n        components: {\n            datetime: Datetime,\n            VclCode,\n            VclFacebook,\n            ModalWrapper,\n        },\n\n        computed: {\n            // mix the getters into computed with object spread operator\n            ...mapGetters([\n                'currentUser',\n                'currentCompany',\n                'getTask'\n                // ...\n            ]),\n\n        },\n        // watch: {\n        //     getTask(val, oldVal) {\n        //         // console.log(val);\n        //         this.getAllTask();\n        //     }\n        // },\n        data() {\n            return {\n                loading: true,\n                taskGroupOrder: ['overdue', 'today', 'upcoming', 'complete'],\n                tasks: {\n                    overdue: [] as Task[],\n                    today: [] as Task[],\n                    upcoming: [] as Task[],\n                    complete: [] as Task[],\n                },\n                currentTask: new Task() as Task,\n            }\n        },\n        created() {\n            console.log('get task before');\n            this.getAllTask();\n\n            this.$store.subscribe((mutation, state) => {\n                if (mutation.type == \"clearCurrentTask\") {\n                    this.getAllTask();\n                }\n            })\n\n        },\n\n        methods: {\n            ...mapMutations(['updateCurrentTask', 'modals/showAddTask']\n            ),\n            showCurrentTask(task: Task) {\n                this.currentTask = task;\n            },\n            deleteTask(task) {\n\n                let self = this;\n\n                // Trigger a confirmation dialog\n                this.$dialog\n                    .confirm('Bạn có chắc chắn?', {okText: \"Xóa ngay\", cancelText: \"Thoát\"})\n                    .then(function (dialog) {\n                        task.delete().then(data => {\n                            self.getAllTask();\n\n                        })\n                    })\n                    .catch(function () {\n                        console.log('Clicked on cancel');\n                    });\n            },\n            async getAllTask() {\n                for (const group in this.tasks) {\n                    this.tasks[group] = [];\n                }\n                const tasks = await Task.instance.getAllTasks();\n                tasks.forEach(task=>{\n                    const due = Moment(task.deadline);\n                    const today = Moment(Date.now());\n\n                    if (task.is_done) {\n                        this.tasks.complete.push(task);\n                    } else if (due.isBefore(today)) {\n                        this.tasks.overdue.push(task);\n                    } else if (due.isAfter(today)) {\n                        this.tasks.upcoming.push(task);\n                    } else {\n                        this.tasks.today.push(task);\n                    }\n                });\n                if (tasks.length > 0) {\n                    this.currentTask = tasks[0];\n                }\n                this.loading = false;\n            },\n            showAddTask(): void {\n                this['modals/showAddTask'](true);\n            },\n        }\n    });\n</script>\n"]}]}