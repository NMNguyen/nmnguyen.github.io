{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue?vue&type=style&index=0&id=1f554d5f&lang=scss&scoped=true&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue","mtime":1557830879574},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/css-loader/index.js","mtime":1557114467524},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1557114467992},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/postcss-loader/src/index.js","mtime":1557114467782},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/sass-loader/lib/loader.js","mtime":1557114472674},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.flex-box-right i {\n    /*margin-left:10px;*/\n    font-size: 10px;\n    padding: 5px;\n    cursor: pointer;\n}\n\n.flex-box-right i.fa-arrows-alt {\n    cursor: move;\n}\n\n.btn-custom {\n    margin-top: 10px;\n    font-size: 12px !important;\n    height: initial !important;\n    padding: 2px 8px;\n    background-color: #5ac0e5 !important;\n    color: #fff !important;\n    border: none;\n}\n\n.btn-custom:hover {\n    font-size: 12px;\n    background-color: #4cabcd !important;\n    color: #fff !important;\n}\n\n.state-item {\n    justify-content: space-between;\n    display: flex;\n    align-content: center;\n    background: #edeff0;\n    cursor: move;\n    height: 40px;\n    padding: 10px;\n}\n\n.btn-blue {\n    border: none;\n    padding: 5px 12px;\n    font-weight: bold;\n}\n",{"version":3,"sources":["AddEditPipeline.vue"],"names":[],"mappingsfile":"AddEditPipeline.vue","sourceRoot":"src/components/modals/PinelineStage","sourcesContent":["<template>\n    <b-modal\n        @show=\"handleOpenModal\"\n        no-close-on-backdrop\n        no-close-on-esc\n        header-class=\"modal-header-add-pipeline\"\n        v-model=\"showModal\">\n        <AddStageModal\n            :type=\"typeOfModalAddPipelineStage\"\n            :title-stage=\"titleState\"\n            :stage-data=\"currentState\"\n            @handleClose=\"showModalAddState=false;\"\n            :showModal=\"showModalAddState\"></AddStageModal>\n        <UnSavedChangeModal\n            @handleSaveChange=\"handleSaveChange()\"\n            @handleClose=\"handleCloseUnSavedChange\"\n            :showModal=\"showModalUnSavedChange\"></UnSavedChangeModal>\n        <template slot=\"modal-header\" slot-scope=\"{ close }\">\n            <h1 v-if=\"type=='new'\">{{messages.SR_007_MODAL_ADD_TITLE}}</h1>\n            <h1 v-else>{{messages.SR_007_MODAL_PIPELINE_TITLE}}</h1>\n            <b-button size=\"sm\" class=\"button-add-pipeline\" variant=\"secondary\" @click=\"handleCloseModal()\">\n                <i class=\"fa fa-times\"></i>\n            </b-button>\n        </template>\n        <div>\n            <h5>{{messages.SR_007_MODAL_PIPELINE_INPUT_NAME_TITLE}}</h5>\n            <b-form-input :class=\"{'isError':isErrorInput}\" v-model=\"title\"\n                          :disabled=\"disabledInputTitle\"\n                          :placeholder=\"messages.SR_007_MODAL_PIPELINE_STAGE_INPUT_REQUIRED\"></b-form-input>\n            <h5 style=\"margin-top:10px\">{{messages.SR_007_MODAL_PIPELINE_TYPE_TITLE}}</h5>\n            <b-list-group>\n                <draggable v-model=\"cachePipeline.list_state\" v-bind:dragOptions=\"dragOptions\" @start=\"drag=true\"\n                           @end=\"changeIndexListStage\">\n                    <b-list-group-item class=\"state-item\" style=\"\" v-for=\"state, index in cachePipeline.list_state\"\n                                       :key=\"index\"\n                                       v-if=\"state.showInPositionPipelineStageModal && !state.deleted\">\n                        <div>\n                            <i :class=\"state.icon\"></i>\n                            {{state.title}}\n                        </div>\n                        <div class=\"flex-box-right\">\n                            <i class=\"fa fa-arrows-alt\"></i>\n                            <i @click=\"handleOpenModalAddStage('edit', state, index)\" class=\"fa fa-edit\"></i>\n                            <i @click=\"removePipelineStage(index)\" v-if=\"!state.disabledRemove && !state.deleted\"\n                               class=\"fa fa-times\"></i>\n                        </div>\n                    </b-list-group-item>\n                </draggable>\n            </b-list-group>\n            <!--<div v-text=\"cachePipeline.list_state\"></div>-->\n            <button class=\"btn btn-primary btn-custom\" @click=\"handleOpenModalAddStage('new')\">\n                <i class=\"fa fa-plus\"></i>\n                {{messages.SR_007_MODAL_PIPELINE_BUTTON_ADD}}\n            </button>\n        </div>\n        <template slot=\"modal-footer\" slot-scope=\"{ ok }\">\n            <!-- Emulate built in modal footer ok and cancel button actions -->\n            <p v-if=\"isProcessing\">{{messages.SR_007_MODAL_STAGE_ADDING}}</p>\n            <b-button size=\"sm\" variant=\"primary\" class=\"btn btn-blue\" @click=\"saveChange()\">\n                <i class=\"fa fa-save\"></i> {{messages.SR_007_MODAL_PIPELINE_BUTTON_SAVE}}\n            </b-button>\n        </template>\n    </b-modal>\n</template>\n\n<script lang=\"ts\">\n    import draggable from 'vuedraggable';\n    import Vue from \"vue\";\n    import {fauth} from '@/firebase';\n    import {mapGetters, mapActions} from 'vuex';\n    import AddStageModal from './AddStageModal.vue';\n    import Pipeline from \"@/models/Pipeline\";\n    import PipelineStage from \"@/models/PipelineStage\";\n    import {Component, Prop, Emit} from \"vue-property-decorator\";\n    import UnSavedChangeModal from '@/components/modals/PinelineStage/UnsavedChange.vue';\n    import {\n        State,\n        Getter,\n        Action,\n        Mutation,\n        namespace\n    } from 'vuex-class'\n    import {messages} from \"@/messages\";\n\n    const _ = require('lodash');\n    @Component({\n        components: {\n            UnSavedChangeModal,\n            AddStageModal,\n            draggable,\n        },\n        computed: {\n            // mix the getters into computed with object spread operator\n            ...mapGetters([\n                'currentCompany',\n                'listPipelineStage',\n                'listPipeline',\n                'cachePipeline',\n                'currentPipeline'\n            ]),\n            disabledInputTitle(){\n                let that = this as any;\n                return that.type == 'edit' && that.currentPipeline.is_default == true;\n            }\n        },\n        methods: {\n            ...mapActions('action', [\n                'setListPipelineStage',\n                'setListPipeline',\n                'setCachePipeline',\n                'setCurrentPipeline'\n            ]),\n        },\n    })\n    export default class AddEditPipeline extends Vue {\n        @Prop(Boolean) showModal: false;\n        @Prop(String) type: 'new';\n        @Prop(Number) index: 1;\n\n        @Getter('cachePipeline') cachePipeline;\n        @Getter('currentPipeline') currentPipeline;\n        @Getter('listPipeline') listPipeline;\n        @Getter('listPipelineStage') listPipelineStage;\n        @Getter('currentCompany') currentCompany;\n\n        @Action('setListStage') setListStage;\n        @Action('setListPipeline') setListPipeline;\n        @Action('setCachePipeline') setCachePipeline;\n        @Action('setCurrentPipeline') setCurrentPipeline;\n        @Action('setListStageToPipeline') setListStageToPipeline;\n\n        showModalAddState: boolean = false;\n        title: string = '';\n        showModalUnSavedChange: boolean = false;\n        drag: boolean = false;\n        titleState: string = '';\n        currentState: object = {};\n        newPositionPipeline: object = {} as Pipeline || {};\n        typeOfModalAddPipelineStage: string = 'new';\n        isErrorInput: boolean = false;\n        isProcessing: boolean = false;\n        isSavedChange: boolean = false;\n        cloneListPipelineStage: Array<object> = [];\n\n        changeIndexListStage() {\n            // let lengthDefaultStage = _.sumBy(this.cachePipeline.list_state, (stage) => {\n            //     return stage.index == 0;\n            // })\n            Object.freeze(this.listPipelineStage)\n            this.cachePipeline.list_state.map((stage, index) => {\n                if (stage.index > 0) {\n                    stage.index = index;\n                }\n                return stage;\n            })\n        }\n\n        onMove({relatedContext, draggedContext}) {\n            const relatedElement = relatedContext.element;\n            const draggedElement = draggedContext.element;\n            let indexRelatedElement = relatedElement.index;\n            let indexDraggedElement = draggedElement.index;\n            console.log(draggedElement.title, 'to', indexRelatedElement)\n            console.log(relatedElement.title, 'to', indexDraggedElement)\n            relatedElement.index = indexDraggedElement;\n            draggedElement.index = indexRelatedElement;\n            return (\n                (!relatedElement || !relatedElement.fixed) && !draggedElement.fixed\n            );\n        }\n\n        dragOptions() {\n            return {\n                animation: 0,\n                group: \"description\",\n                ghostClass: \"ghost\"\n            };\n        }\n\n        handleSaveChange() {\n            this.showModalUnSavedChange = false;\n            this.isSavedChange = true;\n            this.saveChange();\n        }\n\n        handleCloseUnSavedChange() {\n            this.showModalUnSavedChange = false;\n            this.$emit('handleClose');\n        }\n\n        async saveChange() {\n            if (this.title.trim() == '') {\n                this.isErrorInput = true;\n                return;\n            } else {\n                this.isErrorInput = false;\n            }\n            this.isProcessing = true;\n            switch (String(this.type)) {\n                case 'new':\n                    await this.createNewPipeline();\n                    break;\n                case 'edit':\n                    await this.editPipeline();\n                    break;\n            }\n            this.isProcessing = false;\n            this.isSavedChange = true;\n            await this.handleCloseModal();\n        }\n\n        editPipeline() {\n            return new Promise(async (resolve, reject) => {\n                this.cachePipeline.title = this.title;\n                this.changeIndexListStage();\n                const pArray = await this.cachePipeline.list_state.map(async (stage) => {\n                    if (stage.id == '') {\n                        let _newStage = new PipelineStage();\n                        Object.assign(_newStage, stage);\n                        _newStage.pipeline_id = this.currentPipeline.id;\n                        await _newStage.insert().then((data) => {\n                            stage.id = data.id;\n                            stage.pipeline_id = data['pipeline_id'];\n                        })\n                    } else {\n                        await new PipelineStage().getById(stage.id).then((data) => {\n                            Object.assign(data, stage);\n                            data['index'] = stage.index;\n                            if (data['title'] != stage.title) {\n                                data['title'] = stage.title;\n                            }\n                            if (data['stage_type'] != stage.stage_type) {\n                                data['stage_type'] = stage.stage_type;\n                            }\n                            data.update();\n                        })\n                    }\n                    if (stage.deleted == true) {\n                        await new PipelineStage().getById(stage.id).then((data) => {\n                            data.delete();\n                            console.log('Done ', stage.title);\n                        })\n                    }\n                    return stage;\n                });\n                await Promise.all(pArray);\n                this.cachePipeline.list_state = this.cachePipeline.list_state.filter((stage) => {\n                    return !stage.deleted;\n                })\n                new Pipeline().getById(this.currentPipeline.id).then((data) => {\n                    Object.assign(data, this.cachePipeline);\n                    delete data['list_state'];\n                    data.update().then((_data) => {\n                        this.listPipeline.splice(this.index, 1, data);\n                        this.setListPipeline(this.listPipeline);\n                        resolve();\n                    });\n                });\n            })\n\n\n        }\n\n        createNewPipeline() {\n            return new Promise(async (resolve, reject) => {\n                this.newPositionPipeline = new Pipeline();\n                this.changeIndexListStage();\n                Object.assign(this.newPositionPipeline, this.cachePipeline);\n                this.newPositionPipeline['title'] = this.title;\n                delete this.newPositionPipeline['list_state'];\n                //@ts-ignore\n                this.newPositionPipeline.insert()\n                    .then(async (data) => {\n                        const pArray = this.cachePipeline.list_state.map(async (stage) => {\n                            if (stage.pipeline_id == '') stage.pipeline_id = data.id;\n                            if ((stage.id == '' || stage.pipeline_id == 'default') && !stage.deleted) {\n                                let _newStage = new PipelineStage();\n                                Object.assign(_newStage, stage);\n                                _newStage.pipeline_id = data.id;\n                                await _newStage.insert().then((_data) => {\n                                    stage.id = _data.id;\n                                })\n                            }\n                            return stage;\n                        });\n                        await Promise.all(pArray);\n                        //@ts-ignore\n                        this.newPositionPipeline.update().then((data) => {\n                            let _array = this.listPipeline.concat(data);\n                            this.setListPipeline(_array);\n                            resolve();\n                        })\n                    })\n            })\n\n        }\n\n        async _getAllStages(type) {\n            return new PipelineStage().getAllStages(type);\n        }\n\n        async handleOpenModal() {\n            let _data = {};\n            this.isErrorInput = false;\n            // this.changeIndexListStage();\n\n            // Use cloneDeep cuz remove Observer Property in Object.\n            if (String(this.type) == 'new') {\n                _data = {\n                    company_id: this.currentCompany.id,\n                    list_state: _.cloneDeep(this.listPipelineStage),\n                    title: '',\n                };\n                this.cloneListPipelineStage = _.cloneDeep(this.listPipelineStage);\n                this.title = '';\n            } else {\n                await this._getAllStages(this.currentPipeline.id).then((data) => {\n                    _data = {\n                        company_id: this.currentCompany.id,\n                        list_state: data,\n                    };\n                    this.title = this.currentPipeline.title;\n                    this.cloneListPipelineStage = _.cloneDeep(data);\n                });\n                // alert(this.title);\n                await this.setListStageToPipeline({id: this.currentPipeline.id, content: _data['list_state']});\n            }\n            await this.setCachePipeline(_data);\n            await console.log(_data)\n        }\n\n        removePipelineStage(index) {\n            this.cachePipeline.list_state[index]['deleted'] = true;\n            this.cachePipeline.list_state.splice(index, 1, this.cachePipeline.list_state[index]);\n            this.setCachePipeline(this.cachePipeline);\n        }\n\n        handleOpenModalAddStage(type, state, index) {\n            this.showModalAddState = true;\n            this.typeOfModalAddPipelineStage = type;\n            if (type == 'new') {\n                this.currentState = null;\n                this.titleState = '';\n            } else {\n                this.currentState = state;\n                // indexInCurrentArray is position of this item in list_state of state\n                this.currentState['indexInCurrentArray'] = index;\n                this.titleState = this.currentState['title'];\n            }\n        }\n\n        handleCloseModal() {\n            let compareTitle = '';\n            let compareStage = false;\n            if (!this.isSavedChange) {\n                this.cloneListPipelineStage.forEach((stage) => {\n                    delete stage['firestore'];\n                    delete stage['updatedAt'];\n                    delete stage['createdAt'];\n                })\n                let checkArray = [];\n                if (this.type == 'new') {\n                    compareTitle = this.cachePipeline.title;\n                    checkArray = _.cloneDeep(this.cachePipeline.list_state)\n                    checkArray.forEach((stage) => {\n                        delete stage['firestore'];\n                        delete stage['updatedAt'];\n                        delete stage['createdAt'];\n                    })\n                    compareStage =  _.isMatch(this.cloneListPipelineStage, checkArray)\n                } else {\n                    compareTitle = this.currentPipeline.title;\n                    checkArray = _.cloneDeep(this.currentPipeline.list_state)\n                    checkArray.forEach((stage) => {\n                        delete stage['firestore'];\n                        delete stage['updatedAt'];\n                        delete stage['createdAt'];\n                    })\n                    console.log(this.cloneListPipelineStage)\n                    compareStage =  _.isMatch(this.cloneListPipelineStage, checkArray, _.isEqual)\n                }\n\n\n                // Compare\n                if (!compareStage || this.title != compareTitle){\n                    this.showModalUnSavedChange = true;\n                    return;\n                }\n            }\n            this.showModalUnSavedChange = false;\n            this.title = '';\n            this.isSavedChange = false;\n            this.$emit('handleClose')\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .flex-box-right i {\n        /*margin-left:10px;*/\n        font-size: 10px;\n        padding: 5px;\n        cursor: pointer;\n    }\n\n    .flex-box-right i.fa-arrows-alt {\n        cursor: move;\n    }\n\n    .btn-custom {\n        margin-top: 10px;\n        font-size: 12px !important;\n        height: initial !important;\n        padding: 2px 8px;\n        background-color: #5ac0e5 !important;\n        color: #fff !important;\n        border: none;\n    }\n\n    .btn-custom:hover {\n        font-size: 12px;\n        background-color: #4cabcd !important;\n        color: #fff !important;\n    }\n\n    .state-item {\n        justify-content: space-between;\n        display: flex;\n        align-content: center;\n        background: #edeff0;\n        cursor: move;\n        height: 40px;\n        padding: 10px;\n    }\n\n    .btn-blue {\n        border: none;\n        padding: 5px 12px;\n        font-weight: bold;\n    }\n</style>\n<style scoped>\n    >>> .modal-header-add-pipeline {\n        border-bottom: none;\n        padding-bottom: 0px;\n    }\n\n    >>> .modal.show .modal-dialog {\n        padding-left: 10px;\n        padding-right: 10px;\n        border-radius: 5px;\n        background: #edeff0;\n    }\n\n    >>> .modal-content {\n        border: none;\n        padding-left: 5px;\n        padding-right: 5px;\n    }\n\n    >>> .modal-body {\n        padding-top: 0px;\n    }\n\n    >>> .modal-footer {\n        border-top: none;\n        display: flex;\n        justify-content: flex-end;\n        align-content: center;\n    }\n\n    >>> .modal-footer p {\n        flex: 1;\n    }\n\n    >>> .button-add-pipeline {\n        padding: 10px;\n        padding-left: 15px;\n        position: absolute;\n        right: 0;\n        border: none;\n        font-weight: bold;\n        background: #edeff0;\n        top: 0;\n        font-size: 21px !important;\n        color: #4c555c;\n    }\n\n    >>> .button-add-pipeline i {\n        font-size: 21px !important;\n    }\n\n    >>> .isError {\n        border:2px solid #eba2a5 !important\n    }\n</style>\n"]}]}