{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/Candidate/CandidatePage.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/Candidate/CandidatePage.vue","mtime":1557830879565},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport CandidateTypeDropdown from \"@/components/Candidate/CandidateTypeDropdown.vue\";\nimport CandidateColumnFilterDropdown from \"@/components/Candidate/CandidateColumnFilterDropdown.vue\";\nimport FilterColumn from \"@/components/FilterColumn/FilterColumn.vue\";\nimport CandidateColumnFilter from \"@/components/Candidate/CandidateColumnFilter\";\nimport Candidate from \"@/models/Candidate\";\nimport ModalWrapper from \"@/components/ModalWrapper.vue\";\n\nimport {mapMutations} from 'vuex';\nimport {Component, Prop} from \"vue-property-decorator\";\n\n@Component({\n    components: {\n        CandidateTypeDropdown,\n        CandidateColumnFilterDropdown,\n        FilterColumn,\n        ModalWrapper,\n    },\n    methods: {\n        ...mapMutations(['modals/showAddCandidate']),\n    }\n})\nexport default class CandidatePage extends Vue {\n    @Prop({default: null}) position_id: string | null;\n\n    loaded = {\n        candidate: false,\n    };\n    filterNav = {\n        open: true,\n    };\n    candidates = [] as Candidate[];\n    candidateType = \"\";\n    column_filters = {...CandidateColumnFilter};\n    row_check = [] as string[];\n\n    addCandidate(): void {\n        this['modals/showAddCandidate'](true);\n    }\n\n    reset(ev: Event): void {\n        ev.preventDefault();\n    }\n\n    checkAll(checked: boolean): void {\n        if (checked)\n            this.row_check = this.candidates.map(c => c.id);\n        else\n            this.row_check = [];\n    }\n\n    async loadCandidates(): Promise<void> {\n        this.candidates = [];\n        if (this.position_id) {\n            // load by position here\n            // replace code under\n            const loadedCandidates = await Candidate.instance.getAllCandidates();\n            this.candidates = this.candidates.concat(loadedCandidates);\n        } else {\n            const loadedCandidates = await Candidate.instance.getAllCandidates();\n            this.candidates = this.candidates.concat(loadedCandidates);\n        }\n        this.loaded.candidate = true;\n    }\n\n    photoLink(candidate: Candidate): string {\n        console.log(candidate);\n        return (candidate as any).photo\n            || \"https://ui-avatars.com/api/?name=\" + candidate.name + '&size=64&background=c00&color=fff';\n    }\n\n    tableItemClicked(item: Candidate): void {\n        console.log(item);\n        this.$router.push(`/candidate/${item.id}`);\n    }\n\n    // COMPUTED\n    get tableItems(): any[] {\n        return [...this.candidates];\n    }\n    get tableFields(): any[] {\n        return Object.keys(this.column_filters)\n            .reduce((fields: any[], filter: any) => {\n                if (this.column_filters[filter].check) {\n                    return [\n                        ...fields,\n                        {\n                            key: filter,\n                            label: this.column_filters[filter].text,\n                            sortable: true\n                        }\n                    ];\n                } else {\n                    return fields;\n                }\n            },\n            [\"selected\"]\n        );\n    }\n\n    // HOOK\n\n    mounted() {\n        this.loadCandidates().catch(err => {\n            console.log(err);\n        });\n    }\n}\n\n// export default Vue.extend({\n//     name: \"CandidatesPage\",\n//     components: {\n//         CandidateTypeDropdown,\n//         CandidateColumnFilterDropdown,\n//         FilterColumn,\n//         ModalWrapper,\n//     },\n//     props: {\n//         position_id: {\n//             type: String | null, // if null, load all\n//             defaultValue: null,\n//         }\n//     },\n//     data() {\n//         return {\n//             loaded: {\n//                 candidate: false,\n//             },\n//             filterNav: {\n//                 open: true,\n//             },\n//             candidates: [] as Candidate[],\n//             candidateType: \"\",\n//             column_filters: {...CandidateColumnFilter},\n//             row_check: [] as string[],\n//         };\n//     },\n//     methods: {\n//         ...mapMutations(['modals/showAddCandidate']),\n//\n//         addCandidate(): void {\n//             this['modals/showAddCandidate'](true);\n//         },\n//\n//         reset(ev: Event): void {\n//             ev.preventDefault();\n//         },\n//\n//         checkAll(checked: boolean): void {\n//             if (checked)\n//                 this.row_check = this.candidates.map(c => c.id);\n//             else\n//                 this.row_check = [];\n//         },\n//\n//         async loadCandidates(): Promise<void> {\n//             this.candidates = [];\n//             if (this.position_id) {\n//                 // load by position here\n//                 // replace code under\n//                 const loadedCandidates = await Candidate.instance.getAllCandidates();\n//                 this.candidates = this.candidates.concat(loadedCandidates);\n//             } else {\n//                 const loadedCandidates = await Candidate.instance.getAllCandidates();\n//                 this.candidates = this.candidates.concat(loadedCandidates);\n//             }\n//             this.loaded.candidate = true;\n//         }\n//     },\n//     computed: {\n//         tableItems(): any[] {\n//             return [...this.candidates];\n//         },\n//         tableFields(): any[] {\n//             return Object.keys(this.column_filters).reduce(\n//                 (fields: any[], filter: any) => {\n//                     if (this.column_filters[filter].check) {\n//                         return [\n//                             ...fields,\n//                             {\n//                                 key: filter,\n//                                 label: this.column_filters[filter].text,\n//                                 sortable: true\n//                             }\n//                         ];\n//                     } else {\n//                         return fields;\n//                     }\n//                 },\n//                 [\"selected\"]\n//             );\n//         }\n//     },\n//     mounted() {\n//         this.loadCandidates().catch(err => {\n//             console.log(err);\n//         });\n//     },\n// });\n",null]}