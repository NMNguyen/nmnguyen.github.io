{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/company/pipeline.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/company/pipeline.vue","mtime":1557830879572},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport {fauth} from '@/firebase';\nimport {mapGetters, mapActions} from 'vuex';\nimport PositionPipelineComponent from '../PositionPipeline/main.vue';\nimport AddEditPipeline from '../modals/PinelineStage/AddEditPipeline.vue';\n\nimport Pipeline from '@/models/Pipeline';\nimport PipelineStage from '@/models/PipelineStage';\nimport VueContentLoading from 'vue-content-loading';\nimport {messages} from '@/messages/index.ts';\nexport default Vue.extend({\n    components:{\n        PositionPipelineComponent,\n        AddEditPipeline,\n        VueContentLoading\n    },\n    props: {},\n    data(){\n        return{\n            showModal: false,\n            newPositionPipeline: {} as Pipeline,\n            type:'new',\n            currentIndex:0,\n            isLoading: false,\n        }\n    },\n    computed: {\n        // mix the getters into computed with object spread operator\n        ...mapGetters([\n            'currentCompany',\n            'listPipeline',\n            'listPipelineStage',\n            'currentPipeline',\n            'currentPipelineStage'\n        ]),\n    },\n    mounted(){\n        let that = this;\n        that.isLoading = true;\n        this.getAllPineline().then((data)=>{\n            that.setListPipeline(data).then(()=>{\n                new PipelineStage().getAllStages('default').then((data)=>{\n                    that.setListPipelineStage(data);\n                });\n                that.isLoading = false;\n\n            });\n        });\n    },\n    methods: {\n        ...mapActions([\n            'setListPipelineStage',\n            'setListPipeline',\n            'setCurrentPipeline',\n            'setCurrentPipelineStage'\n        ]),\n        async getAllPineline(){\n            return await new Pipeline().getAllPipelines(this.currentCompany.id);\n        },\n\n        handleCloseModalAddPositionPipeline(){\n            this.showModal = false;\n            // this.getAllPineline();\n        },\n        editPipeline(currentIndex){\n            this.type = 'edit';\n            this.currentIndex = currentIndex;\n            this.showModal = true;\n        },\n        handleOpen: function () {\n            this.showModal = true;\n            this.type = 'new';\n        }\n    },\n});\n",null]}