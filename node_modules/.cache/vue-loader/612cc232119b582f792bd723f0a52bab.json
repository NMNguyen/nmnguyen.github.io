{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/App.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/App.vue","mtime":1557830879555},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport Nav from \"@/components/Nav.vue\"; // @ is an alias to /src\nimport Sidebar from \"@/components/Sidebar/Sidebar.vue\";\nimport CreateTask from \"@/components/tasks/CreateTask.vue\";\nimport ModalWrapper from \"@/components/ModalWrapper.vue\";\nimport AddCandidateModal from '@/components/modals/AddCandidateModal.vue';\nimport {messages} from \"@/messages\";\n\nVue.mixin({\n    data: function() {\n        return {\n            messages: messages,\n        }\n    }\n})\n\nexport default Vue.extend({\n    name: \"home\",\n    components: {\n        Nav,\n        Sidebar,\n        CreateTask,\n        ModalWrapper,\n        AddCandidateModal,\n    },\n    data() {\n        return {\n            loading: true,\n            showModal: this.$route.meta.showModal,\n        }\n    },\n\n\n    computed: {\n        hasSidebar(): boolean {\n            return this.$route.path !== \"/login\";\n        }\n    },\n    created() {\n        // when the app is created run the set user method\n        // this uses Vuex to check if a user is signed in\n        // check out mutations in the store.js file\n        this.setUser();\n        window.onunhandledrejection = (error) => {\n            this.$toasted.error(error.reason);\n        }\n        window.onerror = (error) => {\n            this.$toasted.error(error + '');\n        }\n    },\n    methods: {\n        async setUser(): Promise<void> {\n            await this.$store.dispatch(\"setUser\");\n            this.loading = false;\n        }\n    },\n});\n",null]}