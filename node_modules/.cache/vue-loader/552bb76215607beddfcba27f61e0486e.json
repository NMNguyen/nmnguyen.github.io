{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/company/pipeline.vue?vue&type=style&index=0&id=49c44604&lang=scss&scoped=true&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/company/pipeline.vue","mtime":1557830879572},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/css-loader/index.js","mtime":1557114467524},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1557114467992},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/postcss-loader/src/index.js","mtime":1557114467782},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/sass-loader/lib/loader.js","mtime":1557114472674},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.main-content{\n    padding:20px;\n}\n.btn-custom{\n    margin-top:10px;\n    font-size: 12px !important;\n    height: initial !important;\n    padding: 2px 8px;\n    background-color: #5ac0e5 !important;\n    color: #fff !important;\n    border:none;\n}\n.btn-custom:hover{\n    font-size: 12px;\n    background-color: #4cabcd !important;\n    color: #fff !important;\n}\n.modal-content{\n    border: none;\n}\n",{"version":3,"sources":["pipeline.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pipeline.vue","sourceRoot":"src/components/company","sourcesContent":["<template>\n    <div class=\"modal-content\">\n        <div class=\"modal-main\">\n            <div class=\"settings portal\">\n                <div class=\"main-content\">\n                    <h1>{{messages.SR_007_PIPELINE_TITLE}}</h1>\n                    <p class=\"font-weight-normal\">\n                        {{messages.SR_007_PIPELINE_TITLE_DESCRIPTION}}\n                    </p>\n                    <h2>{{messages.SR_007_PIPELINE_SUBTITLE}}</h2>\n                    <p v-html=\"messages.SR_007_PIPELINE_SUBTITLE_DESCRIPTION\">\n                    </p>\n                    <PositionPipelineComponent\n                        v-on:editPositionPipeline=\"editPipeline\"\n                        v-for=\"pipeline, index in listPipeline\"\n                        :key=\"index\"\n                        :index=\"index\"\n                        :pipeline=\"pipeline\">\n                    </PositionPipelineComponent>\n                    <vue-content-loading\n                        v-if=\"isLoading\"\n                        :width=\"500\"\n                        :height=\"35\">\n                        <rect x=\"0\" y=\"13\" rx=\"4\" ry=\"4\" width=\"15\" height=\"15\" />\n                        <rect x=\"20\" y=\"13\" rx=\"4\" ry=\"4\" width=\"100%\" height=\"15\" />\n                    </vue-content-loading>\n                    <AddEditPipeline\n                        :showModal=\"showModal\"\n                        :type=\"type\"\n                        :index=\"currentIndex\"\n                        @handleClose=\"handleCloseModalAddPositionPipeline\"\n                        >\n                    </AddEditPipeline>\n                    <button class=\"btn btn-primary btn-custom\" @click=\"handleOpen\">\n                        <i class=\"fa fa-plus\"></i>\n                        {{ messages.SR_007_BTN_ADD_PIPELINE }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script lang=\"ts\">\n    import Vue from \"vue\";\n    import {fauth} from '@/firebase';\n    import {mapGetters, mapActions} from 'vuex';\n    import PositionPipelineComponent from '../PositionPipeline/main.vue';\n    import AddEditPipeline from '../modals/PinelineStage/AddEditPipeline.vue';\n\n    import Pipeline from '@/models/Pipeline';\n    import PipelineStage from '@/models/PipelineStage';\n    import VueContentLoading from 'vue-content-loading';\n    import {messages} from '@/messages/index.ts';\n    export default Vue.extend({\n        components:{\n            PositionPipelineComponent,\n            AddEditPipeline,\n            VueContentLoading\n        },\n        props: {},\n        data(){\n            return{\n                showModal: false,\n                newPositionPipeline: {} as Pipeline,\n                type:'new',\n                currentIndex:0,\n                isLoading: false,\n            }\n        },\n        computed: {\n            // mix the getters into computed with object spread operator\n            ...mapGetters([\n                'currentCompany',\n                'listPipeline',\n                'listPipelineStage',\n                'currentPipeline',\n                'currentPipelineStage'\n            ]),\n        },\n        mounted(){\n            let that = this;\n            that.isLoading = true;\n            this.getAllPineline().then((data)=>{\n                that.setListPipeline(data).then(()=>{\n                    new PipelineStage().getAllStages('default').then((data)=>{\n                        that.setListPipelineStage(data);\n                    });\n                    that.isLoading = false;\n\n                });\n            });\n        },\n        methods: {\n            ...mapActions([\n                'setListPipelineStage',\n                'setListPipeline',\n                'setCurrentPipeline',\n                'setCurrentPipelineStage'\n            ]),\n            async getAllPineline(){\n                return await new Pipeline().getAllPipelines(this.currentCompany.id);\n            },\n\n            handleCloseModalAddPositionPipeline(){\n                this.showModal = false;\n                // this.getAllPineline();\n            },\n            editPipeline(currentIndex){\n                this.type = 'edit';\n                this.currentIndex = currentIndex;\n                this.showModal = true;\n            },\n            handleOpen: function () {\n                this.showModal = true;\n                this.type = 'new';\n            }\n        },\n    });\n</script>\n<style lang=\"scss\" scoped>\n    .main-content{\n        padding:20px;\n    }\n    .btn-custom{\n        margin-top:10px;\n        font-size: 12px !important;\n        height: initial !important;\n        padding: 2px 8px;\n        background-color: #5ac0e5 !important;\n        color: #fff !important;\n        border:none;\n    }\n    .btn-custom:hover{\n        font-size: 12px;\n        background-color: #4cabcd !important;\n        color: #fff !important;\n    }\n    .modal-content{\n        border: none;\n    }\n</style>\n"]}]}