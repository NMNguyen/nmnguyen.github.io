{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/ModalWrapper.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/ModalWrapper.vue","mtime":1557885684546},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from 'vue';\nimport {Route, RouteRecord} from \"vue-router\";\nexport default Vue.extend({\n    name: 'ModalWrapper',\n    // props: ['class', 'style'],\n    data() {\n        return {\n            showModal: false,\n        }\n    },\n    computed: {\n        this_class(): any\n        {\n            return this.$attrs.class;\n        },\n        this_style(): any\n        {\n            return this.$attrs.style;\n        },\n    },\n    watch: {\n        '$route'(route: Route) {\n            if (route.meta.showModal)\n                this.$modal.show('modal');\n        }\n    },\n    methods: {\n        closeModal(isShow: boolean): void {\n            if (isShow) this.$modal.hide(\"modal\");\n            // const returnPath = this.$route.matched[0].meta.returnPath || \"/\";\n            // this.$router.replace(returnPath);\n            this.$router.replace(localStorage.getItem(\"last-modal-wrapper\") || \"/\");\n        }\n    },\n    mounted() {\n        // console.log(this.$route.matched);\n        if (this.$route.matched.some((route: RouteRecord)=>route.meta.showModal)) {\n            this.$modal.show(\"modal\");\n        } else {\n            localStorage.setItem(\"last-modal-wrapper\", this.$route.fullPath);\n        }\n    },\n    updated(): void {\n        // console.log(this.$route.matched);\n        if (this.$route.matched.some((route: RouteRecord)=>route.meta.showModal)) {\n            this.$modal.show(\"modal\");\n        } else {\n            localStorage.setItem(\"last-modal-wrapper\", this.$route.fullPath);\n        }\n    }\n})\n",{"version":3,"sources":["ModalWrapper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ModalWrapper.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div data-id=\"modal-wrapper\" :class=\"this_class\" :style=\"this_style\">\n        <slot></slot>\n        <modal :scrollable=\"true\" name=\"modal\" :width=\"900\" :max-height=\"600\"\n               :clickToClose=\"false\" :pivotY=\"0.25\" :adaptive=\"true\"\n               @closed=\"closeModal(false)\">\n            <router-view name=\"modal_content\"></router-view>\n            <b-button class=\"close-button\" @click=\"closeModal(true)\">\n                <i class=\"fas fa-times\"></i>\n            </b-button>\n        </modal>\n    </div>\n</template>\n\n<style lang=\"scss\">\n    .close-button {\n        position: absolute;\n        top: 0;\n        left: 0;\n        transform: translate(-50%, -50%);\n        z-index: 999;\n    }\n    .v--modal-overlay .v--modal-box {\n        overflow: visible !important;\n        height:auto!important;\n    }\n</style>\n\n<script lang=\"ts\">\n    import Vue from 'vue';\n    import {Route, RouteRecord} from \"vue-router\";\n    export default Vue.extend({\n        name: 'ModalWrapper',\n        // props: ['class', 'style'],\n        data() {\n            return {\n                showModal: false,\n            }\n        },\n        computed: {\n            this_class(): any\n            {\n                return this.$attrs.class;\n            },\n            this_style(): any\n            {\n                return this.$attrs.style;\n            },\n        },\n        watch: {\n            '$route'(route: Route) {\n                if (route.meta.showModal)\n                    this.$modal.show('modal');\n            }\n        },\n        methods: {\n            closeModal(isShow: boolean): void {\n                if (isShow) this.$modal.hide(\"modal\");\n                // const returnPath = this.$route.matched[0].meta.returnPath || \"/\";\n                // this.$router.replace(returnPath);\n                this.$router.replace(localStorage.getItem(\"last-modal-wrapper\") || \"/\");\n            }\n        },\n        mounted() {\n            // console.log(this.$route.matched);\n            if (this.$route.matched.some((route: RouteRecord)=>route.meta.showModal)) {\n                this.$modal.show(\"modal\");\n            } else {\n                localStorage.setItem(\"last-modal-wrapper\", this.$route.fullPath);\n            }\n        },\n        updated(): void {\n            // console.log(this.$route.matched);\n            if (this.$route.matched.some((route: RouteRecord)=>route.meta.showModal)) {\n                this.$modal.show(\"modal\");\n            } else {\n                localStorage.setItem(\"last-modal-wrapper\", this.$route.fullPath);\n            }\n        }\n    })\n</script>\n"]}]}