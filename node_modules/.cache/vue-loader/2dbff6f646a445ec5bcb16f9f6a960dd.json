{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/tasks/TaskPage.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/tasks/TaskPage.vue","mtime":1557830879585},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from 'vue';\nimport {Datetime} from 'vue-datetime';\nimport Moment from 'moment';\nimport Task from '@/models/Task';\nimport {mapGetters, mapMutations} from 'vuex';\nimport {VclCode, VclFacebook} from 'vue-content-loading';\nimport ModalWrapper from \"@/components/ModalWrapper.vue\";\n\n\nexport default Vue.extend({\n    name: 'home',\n    components: {\n        datetime: Datetime,\n        VclCode,\n        VclFacebook,\n        ModalWrapper,\n    },\n\n    computed: {\n        // mix the getters into computed with object spread operator\n        ...mapGetters([\n            'currentUser',\n            'currentCompany',\n            'getTask'\n            // ...\n        ]),\n\n    },\n    // watch: {\n    //     getTask(val, oldVal) {\n    //         // console.log(val);\n    //         this.getAllTask();\n    //     }\n    // },\n    data() {\n        return {\n            loading: true,\n            taskGroupOrder: ['overdue', 'today', 'upcoming', 'complete'],\n            tasks: {\n                overdue: [] as Task[],\n                today: [] as Task[],\n                upcoming: [] as Task[],\n                complete: [] as Task[],\n            },\n            currentTask: new Task() as Task,\n        }\n    },\n    created() {\n        console.log('get task before');\n        this.getAllTask();\n\n        this.$store.subscribe((mutation, state) => {\n            if (mutation.type == \"clearCurrentTask\") {\n                this.getAllTask();\n            }\n        })\n\n    },\n\n    methods: {\n        ...mapMutations(['updateCurrentTask', 'modals/showAddTask']\n        ),\n        showCurrentTask(task: Task) {\n            this.currentTask = task;\n        },\n        deleteTask(task) {\n\n            let self = this;\n\n            // Trigger a confirmation dialog\n            this.$dialog\n                .confirm('Bạn có chắc chắn?', {okText: \"Xóa ngay\", cancelText: \"Thoát\"})\n                .then(function (dialog) {\n                    task.delete().then(data => {\n                        self.getAllTask();\n\n                    })\n                })\n                .catch(function () {\n                    console.log('Clicked on cancel');\n                });\n        },\n        async getAllTask() {\n            for (const group in this.tasks) {\n                this.tasks[group] = [];\n            }\n            const tasks = await Task.instance.getAllTasks();\n            tasks.forEach(task=>{\n                const due = Moment(task.deadline);\n                const today = Moment(Date.now());\n\n                if (task.is_done) {\n                    this.tasks.complete.push(task);\n                } else if (due.isBefore(today)) {\n                    this.tasks.overdue.push(task);\n                } else if (due.isAfter(today)) {\n                    this.tasks.upcoming.push(task);\n                } else {\n                    this.tasks.today.push(task);\n                }\n            });\n            if (tasks.length > 0) {\n                this.currentTask = tasks[0];\n            }\n            this.loading = false;\n        },\n        showAddTask(): void {\n            this['modals/showAddTask'](true);\n        },\n    }\n});\n",null]}