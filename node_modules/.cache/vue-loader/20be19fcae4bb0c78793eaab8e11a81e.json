{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddStageModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddStageModal.vue","mtime":1557830879574},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PinelineState from \"../../../models/PipelineStage\";\nimport {mapGetters, mapActions} from 'vuex';\nconst _ = require('lodash');\nimport {messages} from \"../../../messages\";\n\nexport default {\n\n    name: \"AddStagePipeline\",\n    props: {\n        showModal: {\n            type: Boolean,\n            default: false\n        },\n        type: {\n            type: String,\n            default: 'new'\n        },\n        stageData:{\n            type: Object,\n            default:()=> null,\n        },\n        titleStage:{\n            type: String,\n            default: '',\n        }\n    },\n    data() {\n        return {\n            showModalAddState:false,\n            selectedOptionAction: null,\n            currentTitleStage: '',\n            currentState: null,\n            optionsAction: [\n                { value: null, text: 'Available Stage Actions' , disabled: true},\n                { value: 'a', text: 'Send Email/SMS' },\n                { value: 'b', text: 'Send Questionnaire' },\n                { value: 'c', text: 'Team Feedback' },\n                { value: 'd', text: 'Candidate Scorecards'},\n            ],\n            isErrorForm: {\n                stageNameInput: false,\n                stageType: false,\n            },\n            isProcessing: false\n    }\n    },\n    computed:{\n        ...mapGetters([\n            'cachePipeline',\n            'listPipelineStage',\n            'currentCompany'\n        ]),\n    },\n    methods: {\n        ...mapActions([\n           'currentPipeline',\n            'setCachePipeline',\n            'setListPipelineStage'\n        ]),\n        async handleOpenModal(){\n            this.isErrorForm =  {\n                stageNameInput: false,\n                stageType: false,\n            }\n            if (this.listPipelineStage.length == 0){\n                await new PinelineState().getAllStages('default').then((data)=>{\n                    this.setListPipelineStage(data);\n                    console.log(data);\n                });\n            }\n            this.currentTitleStage = this.titleStage;\n        },\n        saveChange(){\n            if (this.stageData == null){\n                this.isErrorForm.stageType = true;\n            }else{\n                this.isErrorForm.stageType = false;\n            }\n            if (this.currentTitleStage.trim() == ''){\n                this.isErrorForm.stageNameInput = true;\n            }else{\n                this.isErrorForm.stageNameInput = false;\n            }\n            if (this.isErrorForm.stageType || this.isErrorForm.stageNameInput){\n                return;\n            }\n            switch (this.type) {\n                case 'new':\n                    this.createPipelineStage();\n                    break;\n                case 'edit':\n                    this.editPipelineStage();\n                    break;\n            }\n        },\n        createPipelineStage(){\n            let _newPipelineStage = {};\n            let lengthListStage = _.sumBy(this.cachePipeline.list_state, (state)=>{\n                return state.showInPositionPipelineStageModal == true;\n            });\n            Object.assign(_newPipelineStage, this.stageData);\n            _newPipelineStage.title = this.currentTitleStage;\n            _newPipelineStage.id = '';\n            _newPipelineStage.pipeline_id = '';\n            _newPipelineStage.deleted = false;\n            _newPipelineStage.index = lengthListStage + 1;\n            _newPipelineStage.showInPositionPipelineStageModal = true;\n            this.cachePipeline.list_state.push(_newPipelineStage);\n            this.handleCloseModal();\n        },\n        editPipelineStage( ){\n            let _newPipelineStage = {};\n            let findStageChanged = this.listPipelineStage.find((stage)=>{\n                return stage.stage_type == this.stageData.stage_type;\n            })\n            Object.assign(_newPipelineStage, findStageChanged);\n            _newPipelineStage.pipeline_id = this.stageData.pipeline_id;\n            _newPipelineStage.id = this.stageData.id;\n            _newPipelineStage.title = this.currentTitleStage;\n            _newPipelineStage.deleted = false;\n            _newPipelineStage.index = this.stageData.index;\n            _newPipelineStage.showInPositionPipelineStageModal = true;\n            this.cachePipeline.list_state.splice(this.stageData.indexInCurrentArray, 1 , _newPipelineStage);\n            this.setCachePipeline(this.cachePipeline);\n            this.handleCloseModal();\n        },\n        handleCloseModal() {\n            this.$emit('handleClose')\n        }\n    }\n}\n",null]}