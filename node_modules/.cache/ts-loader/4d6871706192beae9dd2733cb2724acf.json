{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js!/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Data/app.cloudjet.work/src/store/position_pipeline/store.ts","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/store/position_pipeline/store.ts","mtime":1557830879592},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport PipelineStage from \"@/models/PipelineStage\";\nimport PositionPipeline from \"@/models/Pipeline\";\nVue.use(Vuex);\nvar store = {\n  // namespaced: true,\n  state: {\n    listPipeline: [],\n    listPipelineStage: [],\n    currentPipeline: {},\n    currentPipelineStage: {},\n    cachePipeline: {}\n  },\n  mutations: {\n    setCachePipeline: function setCachePipeline(state, data) {\n      state.cachePipeline = data;\n    },\n    setListPipeline: function setListPipeline(state, data) {\n      state.listPipeline = data;\n    },\n    setListPipelineStage: function setListPipelineStage(state, data) {\n      state.listPipelineStage = data.map(function (stage) {\n        delete stage['firestore'];\n        return stage;\n      }); // Object.freeze(state.listPipelineStage)\n    },\n    setCurrentPipeline: function setCurrentPipeline(state, data) {\n      state.currentPipeline = data;\n    },\n    setCurrentPipelineStage: function setCurrentPipelineStage(state, data) {\n      state.currentPipelineStage = data;\n    }\n  },\n  getters: {\n    cachePipeline: function cachePipeline(state, data) {\n      return state.cachePipeline;\n    },\n    listPipeline: function listPipeline(state) {\n      return state.listPipeline;\n    },\n    listPipelineStage: function listPipelineStage(state) {\n      return state.listPipelineStage;\n    },\n    currentPipeline: function currentPipeline(state) {\n      return state.currentPipeline;\n    },\n    currentPipelineStage: function currentPipelineStage(state) {\n      return state.currentPipelineStage;\n    }\n  },\n  actions: {\n    editListPipeline: function () {\n      var _editListPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(context, data) {\n        var _positionPipeline, _newPositionPipeline;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = data.type;\n                _context3.next = _context3.t0 === 'remove' ? 3 : _context3.t0 === 'duplicate' ? 9 : 16;\n                break;\n\n              case 3:\n                _positionPipeline = data.content[data.index];\n\n                _positionPipeline.deleteAllStateByID(_positionPipeline.id);\n\n                _positionPipeline.delete();\n\n                data.content.splice(data.index, 1);\n                context.dispatch('setListPipeline', data.content);\n                return _context3.abrupt(\"break\", 16);\n\n              case 9:\n                _newPositionPipeline = new PositionPipeline();\n                Object.assign(_newPositionPipeline, data.content[data.index]);\n                _newPositionPipeline.is_default = false;\n                _newPositionPipeline.title += ' (Copy)';\n                delete _newPositionPipeline['list_state'];\n\n                _newPositionPipeline.insert().then(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee2(_data) {\n                    var pArray;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            pArray = data.content[data.index]['list_state'].map(\n                            /*#__PURE__*/\n                            function () {\n                              var _ref2 = _asyncToGenerator(\n                              /*#__PURE__*/\n                              regeneratorRuntime.mark(function _callee(stage) {\n                                var _newState;\n\n                                return regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        if (!(stage.pipeline_id != '' && stage.pipeline_id != 'default')) {\n                                          _context.next = 6;\n                                          break;\n                                        }\n\n                                        _newState = new PipelineStage();\n                                        Object.assign(_newState, stage);\n                                        _newState.pipeline_id = _data.id;\n                                        _context.next = 6;\n                                        return _newState.insert().then(function (response) {\n                                          stage.id = response.id;\n                                        });\n\n                                      case 6:\n                                        return _context.abrupt(\"return\", stage);\n\n                                      case 7:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n\n                              return function (_x4) {\n                                return _ref2.apply(this, arguments);\n                              };\n                            }());\n                            _context2.next = 3;\n                            return Promise.all(pArray);\n\n                          case 3:\n                            _newPositionPipeline.update().then(function (response) {\n                              data.content.push(response);\n                              context.dispatch('setListPipeline', data.content);\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n                return _context3.abrupt(\"break\", 16);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function editListPipeline(_x, _x2) {\n        return _editListPipeline.apply(this, arguments);\n      }\n\n      return editListPipeline;\n    }(),\n    setCachePipeline: function () {\n      var _setCachePipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(context, data) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                context.commit(\"setCachePipeline\", data);\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function setCachePipeline(_x5, _x6) {\n        return _setCachePipeline.apply(this, arguments);\n      }\n\n      return setCachePipeline;\n    }(),\n    setCurrentPipelineStage: function () {\n      var _setCurrentPipelineStage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(context, data) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                context.commit(\"setCurrentPipelineStage\", data);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function setCurrentPipelineStage(_x7, _x8) {\n        return _setCurrentPipelineStage.apply(this, arguments);\n      }\n\n      return setCurrentPipelineStage;\n    }(),\n    setCurrentPipeline: function () {\n      var _setCurrentPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(context, data) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                context.commit(\"setCurrentPipeline\", data);\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function setCurrentPipeline(_x9, _x10) {\n        return _setCurrentPipeline.apply(this, arguments);\n      }\n\n      return setCurrentPipeline;\n    }(),\n    setListPipelineStage: function () {\n      var _setListPipelineStage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(context, data) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                context.commit(\"setListPipelineStage\", data);\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function setListPipelineStage(_x11, _x12) {\n        return _setListPipelineStage.apply(this, arguments);\n      }\n\n      return setListPipelineStage;\n    }(),\n    setListPipeline: function () {\n      var _setListPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(context, data) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                context.commit(\"setListPipeline\", data);\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function setListPipeline(_x13, _x14) {\n        return _setListPipeline.apply(this, arguments);\n      }\n\n      return setListPipeline;\n    }(),\n    setListStageToPipeline: function () {\n      var _setListStageToPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9(context, data) {\n        var listPipeline, indexPipeline;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                listPipeline = context.getters['listPipeline'];\n                indexPipeline = listPipeline.findIndex(function (pipeline) {\n                  return pipeline.id == data.id;\n                });\n                listPipeline[indexPipeline]['list_state'] = data.content;\n                context.dispatch('setListPipeline', listPipeline);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function setListStageToPipeline(_x15, _x16) {\n        return _setListStageToPipeline.apply(this, arguments);\n      }\n\n      return setListStageToPipeline;\n    }()\n  }\n};\nexport default store;",null]}