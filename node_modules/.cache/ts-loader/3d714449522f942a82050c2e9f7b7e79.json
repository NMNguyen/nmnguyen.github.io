{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-2!/Volumes/Data/app.cloudjet.work/src/store/position_pipeline/store.ts","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/store/position_pipeline/store.ts","mtime":1557830879592},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport PipelineStage from \"@/models/PipelineStage\";\nimport PositionPipeline from \"@/models/Pipeline\";\nVue.use(Vuex);\nvar store = {\n  // namespaced: true,\n  state: {\n    listPipeline: [],\n    listPipelineStage: [],\n    currentPipeline: {},\n    currentPipelineStage: {},\n    cachePipeline: {}\n  },\n  mutations: {\n    setCachePipeline: function setCachePipeline(state, data) {\n      state.cachePipeline = data;\n    },\n    setListPipeline: function setListPipeline(state, data) {\n      state.listPipeline = data;\n    },\n    setListPipelineStage: function setListPipelineStage(state, data) {\n      state.listPipelineStage = data.map(function (stage) {\n        delete stage['firestore'];\n        return stage;\n      }); // Object.freeze(state.listPipelineStage)\n    },\n    setCurrentPipeline: function setCurrentPipeline(state, data) {\n      state.currentPipeline = data;\n    },\n    setCurrentPipelineStage: function setCurrentPipelineStage(state, data) {\n      state.currentPipelineStage = data;\n    }\n  },\n  getters: {\n    cachePipeline: function cachePipeline(state, data) {\n      return state.cachePipeline;\n    },\n    listPipeline: function listPipeline(state) {\n      return state.listPipeline;\n    },\n    listPipelineStage: function listPipelineStage(state) {\n      return state.listPipelineStage;\n    },\n    currentPipeline: function currentPipeline(state) {\n      return state.currentPipeline;\n    },\n    currentPipelineStage: function currentPipelineStage(state) {\n      return state.currentPipelineStage;\n    }\n  },\n  actions: {\n    editListPipeline: function () {\n      var _editListPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(context, data) {\n        var _positionPipeline, _newPositionPipeline;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = data.type;\n                _context3.next = _context3.t0 === 'remove' ? 3 : _context3.t0 === 'duplicate' ? 9 : 16;\n                break;\n\n              case 3:\n                _positionPipeline = data.content[data.index];\n\n                _positionPipeline.deleteAllStateByID(_positionPipeline.id);\n\n                _positionPipeline.delete();\n\n                data.content.splice(data.index, 1);\n                context.dispatch('setListPipeline', data.content);\n                return _context3.abrupt(\"break\", 16);\n\n              case 9:\n                _newPositionPipeline = new PositionPipeline();\n                Object.assign(_newPositionPipeline, data.content[data.index]);\n                _newPositionPipeline.is_default = false;\n                _newPositionPipeline.title += ' (Copy)';\n                delete _newPositionPipeline['list_state'];\n\n                _newPositionPipeline.insert().then(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee2(_data) {\n                    var pArray;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            pArray = data.content[data.index]['list_state'].map(\n                            /*#__PURE__*/\n                            function () {\n                              var _ref2 = _asyncToGenerator(\n                              /*#__PURE__*/\n                              regeneratorRuntime.mark(function _callee(stage) {\n                                var _newState;\n\n                                return regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        if (!(stage.pipeline_id != '' && stage.pipeline_id != 'default')) {\n                                          _context.next = 6;\n                                          break;\n                                        }\n\n                                        _newState = new PipelineStage();\n                                        Object.assign(_newState, stage);\n                                        _newState.pipeline_id = _data.id;\n                                        _context.next = 6;\n                                        return _newState.insert().then(function (response) {\n                                          stage.id = response.id;\n                                        });\n\n                                      case 6:\n                                        return _context.abrupt(\"return\", stage);\n\n                                      case 7:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n\n                              return function (_x4) {\n                                return _ref2.apply(this, arguments);\n                              };\n                            }());\n                            _context2.next = 3;\n                            return Promise.all(pArray);\n\n                          case 3:\n                            _newPositionPipeline.update().then(function (response) {\n                              data.content.push(response);\n                              context.dispatch('setListPipeline', data.content);\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n                return _context3.abrupt(\"break\", 16);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function editListPipeline(_x, _x2) {\n        return _editListPipeline.apply(this, arguments);\n      }\n\n      return editListPipeline;\n    }(),\n    setCachePipeline: function () {\n      var _setCachePipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(context, data) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                context.commit(\"setCachePipeline\", data);\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function setCachePipeline(_x5, _x6) {\n        return _setCachePipeline.apply(this, arguments);\n      }\n\n      return setCachePipeline;\n    }(),\n    setCurrentPipelineStage: function () {\n      var _setCurrentPipelineStage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(context, data) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                context.commit(\"setCurrentPipelineStage\", data);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function setCurrentPipelineStage(_x7, _x8) {\n        return _setCurrentPipelineStage.apply(this, arguments);\n      }\n\n      return setCurrentPipelineStage;\n    }(),\n    setCurrentPipeline: function () {\n      var _setCurrentPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(context, data) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                context.commit(\"setCurrentPipeline\", data);\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function setCurrentPipeline(_x9, _x10) {\n        return _setCurrentPipeline.apply(this, arguments);\n      }\n\n      return setCurrentPipeline;\n    }(),\n    setListPipelineStage: function () {\n      var _setListPipelineStage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(context, data) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                context.commit(\"setListPipelineStage\", data);\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function setListPipelineStage(_x11, _x12) {\n        return _setListPipelineStage.apply(this, arguments);\n      }\n\n      return setListPipelineStage;\n    }(),\n    setListPipeline: function () {\n      var _setListPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(context, data) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                context.commit(\"setListPipeline\", data);\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function setListPipeline(_x13, _x14) {\n        return _setListPipeline.apply(this, arguments);\n      }\n\n      return setListPipeline;\n    }(),\n    setListStageToPipeline: function () {\n      var _setListStageToPipeline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9(context, data) {\n        var listPipeline, indexPipeline;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                listPipeline = context.getters['listPipeline'];\n                indexPipeline = listPipeline.findIndex(function (pipeline) {\n                  return pipeline.id == data.id;\n                });\n                listPipeline[indexPipeline]['list_state'] = data.content;\n                context.dispatch('setListPipeline', listPipeline);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function setListStageToPipeline(_x15, _x16) {\n        return _setListStageToPipeline.apply(this, arguments);\n      }\n\n      return setListStageToPipeline;\n    }()\n  }\n};\nexport default store;",{"version":3,"sources":["/Volumes/Data/app.cloudjet.work/src/store/position_pipeline/store.ts"],"names":[],"mappings":"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","sourcesContent":["import {Action, MutationTree, StoreOptions, Module} from \"vuex\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport PipelineStage from \"@/models/PipelineStage\";\nimport PositionPipeline from \"@/models/Pipeline\";\n\nVue.use(Vuex);\n\nexport interface PositionPinelineState {\n    listPipeline: Array<object>,\n    listPipelineStage: Array<object>,\n    currentPipeline: object,\n    currentPipelineStage: object,\n    cachePipeline: object\n}\n\nconst store: Module<PositionPinelineState, any> = {\n    // namespaced: true,\n    state: {\n        listPipeline: [],\n        listPipelineStage: [],\n        currentPipeline: {},\n        currentPipelineStage: {},\n        cachePipeline: {},\n    },\n    mutations: {\n        setCachePipeline(state, data) {\n            state.cachePipeline = data;\n        },\n        setListPipeline(state, data) {\n            state.listPipeline = data;\n        },\n        setListPipelineStage(state, data) {\n            state.listPipelineStage = data.map((stage)=>{\n                delete stage['firestore'];\n                return stage;\n            });\n            // Object.freeze(state.listPipelineStage)\n\n        },\n        setCurrentPipeline(state, data) {\n            state.currentPipeline = data;\n        },\n        setCurrentPipelineStage(state, data) {\n            state.currentPipelineStage = data;\n        }\n    },\n    getters: {\n        cachePipeline(state, data) {\n            return state.cachePipeline;\n        },\n        listPipeline(state) {\n            return state.listPipeline;\n        },\n        listPipelineStage(state) {\n            return state.listPipelineStage;\n        },\n        currentPipeline(state) {\n            return state.currentPipeline;\n        },\n        currentPipelineStage(state) {\n            return state.currentPipelineStage;\n        },\n    },\n    actions: {\n        editListPipeline: async (context, data) => {\n            switch (data.type) {\n                case 'remove':\n                    let _positionPipeline = data.content[data.index];\n                    _positionPipeline.deleteAllStateByID(_positionPipeline.id);\n                    _positionPipeline.delete();\n                    data.content.splice(data.index, 1);\n                    context.dispatch('setListPipeline', data.content);\n                    break;\n                case 'duplicate':\n                    let _newPositionPipeline = new PositionPipeline();\n                    Object.assign(_newPositionPipeline, data.content[data.index]);\n                    _newPositionPipeline.is_default = false;\n                    _newPositionPipeline.title+= ' (Copy)';\n                    delete _newPositionPipeline['list_state'];\n                    _newPositionPipeline.insert().then(async (_data) => {\n                        const pArray = data.content[data.index]['list_state'].map(async (stage) => {\n                            if (stage.pipeline_id != '' && stage.pipeline_id != 'default') {\n                                let _newState = new PipelineStage();\n                                Object.assign(_newState, stage);\n                                _newState.pipeline_id = _data.id;\n                                await _newState.insert().then((response) => {\n                                    stage.id = response.id;\n                                });\n                            }\n                            return stage;\n                        });\n                        await Promise.all(pArray);\n                        _newPositionPipeline.update().then((response) => {\n                            data.content.push(response);\n                            context.dispatch('setListPipeline', data.content);\n                        });\n                    });\n                    break;\n            }\n        },\n        setCachePipeline: async (context, data) => {\n            context.commit(\"setCachePipeline\", data);\n        },\n        setCurrentPipelineStage: async (context, data) => {\n            context.commit(\"setCurrentPipelineStage\", data);\n        },\n        setCurrentPipeline: async (context, data) => {\n            context.commit(\"setCurrentPipeline\", data);\n        },\n        setListPipelineStage: async (context, data) => {\n            context.commit(\"setListPipelineStage\", data);\n        },\n        setListPipeline: async (context, data) => {\n            context.commit(\"setListPipeline\", data);\n        },\n        setListStageToPipeline: async (context, data) =>{\n            let listPipeline =  context.getters['listPipeline']\n            let indexPipeline = listPipeline.findIndex((pipeline)=>{\n                return pipeline.id == data.id;\n            })\n            listPipeline[indexPipeline]['list_state'] = data.content;\n            context.dispatch('setListPipeline', listPipeline);\n        }\n    },\n};\n\nexport default store;\n"],"sourceRoot":""}]}