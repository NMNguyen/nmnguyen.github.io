{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js!/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/tasks/TaskPage.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/tasks/TaskPage.vue","mtime":1557830879585},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport Vue from 'vue';\nimport { Datetime } from 'vue-datetime';\nimport Moment from 'moment';\nimport Task from '@/models/Task';\nimport { mapGetters, mapMutations } from 'vuex';\nimport { VclCode, VclFacebook } from 'vue-content-loading';\nimport ModalWrapper from \"@/components/ModalWrapper.vue\";\nexport default Vue.extend({\n  name: 'home',\n  components: {\n    datetime: Datetime,\n    VclCode: VclCode,\n    VclFacebook: VclFacebook,\n    ModalWrapper: ModalWrapper\n  },\n  computed: _objectSpread({}, mapGetters(['currentUser', 'currentCompany', 'getTask' // ...\n  ])),\n  // watch: {\n  //     getTask(val, oldVal) {\n  //         // console.log(val);\n  //         this.getAllTask();\n  //     }\n  // },\n  data: function data() {\n    return {\n      loading: true,\n      taskGroupOrder: ['overdue', 'today', 'upcoming', 'complete'],\n      tasks: {\n        overdue: [],\n        today: [],\n        upcoming: [],\n        complete: []\n      },\n      currentTask: new Task()\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    console.log('get task before');\n    this.getAllTask();\n    this.$store.subscribe(function (mutation, state) {\n      if (mutation.type == \"clearCurrentTask\") {\n        _this.getAllTask();\n      }\n    });\n  },\n  methods: _objectSpread({}, mapMutations(['updateCurrentTask', 'modals/showAddTask']), {\n    showCurrentTask: function showCurrentTask(task) {\n      this.currentTask = task;\n    },\n    deleteTask: function deleteTask(task) {\n      var self = this; // Trigger a confirmation dialog\n\n      this.$dialog.confirm('Bạn có chắc chắn?', {\n        okText: \"Xóa ngay\",\n        cancelText: \"Thoát\"\n      }).then(function (dialog) {\n        task.delete().then(function (data) {\n          self.getAllTask();\n        });\n      }).catch(function () {\n        console.log('Clicked on cancel');\n      });\n    },\n    getAllTask: function () {\n      var _getAllTask = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var group, tasks;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                for (group in this.tasks) {\n                  this.tasks[group] = [];\n                }\n\n                _context.next = 3;\n                return Task.instance.getAllTasks();\n\n              case 3:\n                tasks = _context.sent;\n                tasks.forEach(function (task) {\n                  var due = Moment(task.deadline);\n                  var today = Moment(Date.now());\n\n                  if (task.is_done) {\n                    _this2.tasks.complete.push(task);\n                  } else if (due.isBefore(today)) {\n                    _this2.tasks.overdue.push(task);\n                  } else if (due.isAfter(today)) {\n                    _this2.tasks.upcoming.push(task);\n                  } else {\n                    _this2.tasks.today.push(task);\n                  }\n                });\n\n                if (tasks.length > 0) {\n                  this.currentTask = tasks[0];\n                }\n\n                this.loading = false;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAllTask() {\n        return _getAllTask.apply(this, arguments);\n      }\n\n      return getAllTask;\n    }(),\n    showAddTask: function showAddTask() {\n      this['modals/showAddTask'](true);\n    }\n  })\n});",null]}