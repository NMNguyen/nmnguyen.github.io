{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js!/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/company/pipeline.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/company/pipeline.vue","mtime":1557830879572},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport Vue from \"vue\";\nimport { mapGetters, mapActions } from 'vuex';\nimport PositionPipelineComponent from \"../PositionPipeline/main.vue\";\nimport AddEditPipeline from \"../modals/PinelineStage/AddEditPipeline.vue\";\nimport Pipeline from '@/models/Pipeline';\nimport PipelineStage from '@/models/PipelineStage';\nimport VueContentLoading from 'vue-content-loading';\nexport default Vue.extend({\n  components: {\n    PositionPipelineComponent: PositionPipelineComponent,\n    AddEditPipeline: AddEditPipeline,\n    VueContentLoading: VueContentLoading\n  },\n  props: {},\n  data: function data() {\n    return {\n      showModal: false,\n      newPositionPipeline: {},\n      type: 'new',\n      currentIndex: 0,\n      isLoading: false\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['currentCompany', 'listPipeline', 'listPipelineStage', 'currentPipeline', 'currentPipelineStage'])),\n  mounted: function mounted() {\n    var that = this;\n    that.isLoading = true;\n    this.getAllPineline().then(function (data) {\n      that.setListPipeline(data).then(function () {\n        new PipelineStage().getAllStages('default').then(function (data) {\n          that.setListPipelineStage(data);\n        });\n        that.isLoading = false;\n      });\n    });\n  },\n  methods: _objectSpread({}, mapActions(['setListPipelineStage', 'setListPipeline', 'setCurrentPipeline', 'setCurrentPipelineStage']), {\n    getAllPineline: function () {\n      var _getAllPineline = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return new Pipeline().getAllPipelines(this.currentCompany.id);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAllPineline() {\n        return _getAllPineline.apply(this, arguments);\n      }\n\n      return getAllPineline;\n    }(),\n    handleCloseModalAddPositionPipeline: function handleCloseModalAddPositionPipeline() {\n      this.showModal = false; // this.getAllPineline();\n    },\n    editPipeline: function editPipeline(currentIndex) {\n      this.type = 'edit';\n      this.currentIndex = currentIndex;\n      this.showModal = true;\n    },\n    handleOpen: function handleOpen() {\n      this.showModal = true;\n      this.type = 'new';\n    }\n  })\n});",null]}