{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-2!/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue","mtime":1557885684549},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["import _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _classCallCheck from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport * as tslib_1 from \"tslib\";\nimport draggable from 'vuedraggable';\nimport Vue from \"vue\";\nimport { mapGetters, mapActions } from 'vuex';\nimport AddStageModal from \"./AddStageModal.vue\";\nimport Pipeline from \"@/models/Pipeline\";\nimport PipelineStage from \"@/models/PipelineStage\";\nimport { Component, Prop } from \"vue-property-decorator\";\nimport UnSavedChangeModal from '@/components/modals/PinelineStage/UnsavedChange.vue';\nimport { Getter, Action } from 'vuex-class';\n\nvar _ = require('lodash');\n\nvar AddEditPipeline =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(AddEditPipeline, _Vue);\n\n  function AddEditPipeline() {\n    var _this;\n\n    _classCallCheck(this, AddEditPipeline);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddEditPipeline).apply(this, arguments));\n    _this.showModalAddState = false;\n    _this.title = '';\n    _this.showModalUnSavedChange = false;\n    _this.drag = false;\n    _this.titleState = '';\n    _this.currentState = {};\n    _this.newPositionPipeline = {} || {};\n    _this.typeOfModalAddPipelineStage = 'new';\n    _this.isErrorInput = false;\n    _this.isProcessing = false;\n    _this.isSavedChange = false;\n    _this.cloneListPipelineStage = [];\n    return _this;\n  }\n\n  _createClass(AddEditPipeline, [{\n    key: \"changeIndexListStage\",\n    value: function changeIndexListStage() {\n      // let lengthDefaultStage = _.sumBy(this.cachePipeline.list_state, (stage) => {\n      //     return stage.index == 0;\n      // })\n      Object.freeze(this.listPipelineStage);\n      this.cachePipeline.list_state.map(function (stage, index) {\n        if (stage.index > 0) {\n          stage.index = index;\n        }\n\n        return stage;\n      });\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(_ref) {\n      var relatedContext = _ref.relatedContext,\n          draggedContext = _ref.draggedContext;\n      var relatedElement = relatedContext.element;\n      var draggedElement = draggedContext.element;\n      var indexRelatedElement = relatedElement.index;\n      var indexDraggedElement = draggedElement.index;\n      console.log(draggedElement.title, 'to', indexRelatedElement);\n      console.log(relatedElement.title, 'to', indexDraggedElement);\n      relatedElement.index = indexDraggedElement;\n      draggedElement.index = indexRelatedElement;\n      return (!relatedElement || !relatedElement.fixed) && !draggedElement.fixed;\n    }\n  }, {\n    key: \"dragOptions\",\n    value: function dragOptions() {\n      return {\n        animation: 0,\n        group: \"description\",\n        ghostClass: \"ghost\"\n      };\n    }\n  }, {\n    key: \"handleSaveChange\",\n    value: function handleSaveChange() {\n      this.showModalUnSavedChange = false;\n      this.isSavedChange = true;\n      this.saveChange();\n    }\n  }, {\n    key: \"handleCloseUnSavedChange\",\n    value: function handleCloseUnSavedChange() {\n      this.showModalUnSavedChange = false;\n      this.$emit('handleClose');\n    }\n  }, {\n    key: \"saveChange\",\n    value: function () {\n      var _saveChange = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.title.trim() == '')) {\n                  _context.next = 5;\n                  break;\n                }\n\n                this.isErrorInput = true;\n                return _context.abrupt(\"return\");\n\n              case 5:\n                this.isErrorInput = false;\n\n              case 6:\n                this.isProcessing = true;\n                _context.t0 = String(this.type);\n                _context.next = _context.t0 === 'new' ? 10 : _context.t0 === 'edit' ? 13 : 16;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return this.createNewPipeline();\n\n              case 12:\n                return _context.abrupt(\"break\", 16);\n\n              case 13:\n                _context.next = 15;\n                return this.editPipeline();\n\n              case 15:\n                return _context.abrupt(\"break\", 16);\n\n              case 16:\n                this.isProcessing = false;\n                this.isSavedChange = true;\n                _context.next = 20;\n                return this.handleCloseModal();\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function saveChange() {\n        return _saveChange.apply(this, arguments);\n      }\n\n      return saveChange;\n    }()\n  }, {\n    key: \"editPipeline\",\n    value: function editPipeline() {\n      var _this2 = this;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var pArray;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _this2.cachePipeline.title = _this2.title;\n\n                  _this2.changeIndexListStage();\n\n                  _context3.next = 4;\n                  return _this2.cachePipeline.list_state.map(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref3 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee2(stage) {\n                      var _newStage;\n\n                      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              if (!(stage.id == '')) {\n                                _context2.next = 8;\n                                break;\n                              }\n\n                              _newStage = new PipelineStage();\n                              Object.assign(_newStage, stage);\n                              _newStage.pipeline_id = _this2.currentPipeline.id;\n                              _context2.next = 6;\n                              return _newStage.insert().then(function (data) {\n                                stage.id = data.id;\n                                stage.pipeline_id = data['pipeline_id'];\n                              });\n\n                            case 6:\n                              _context2.next = 10;\n                              break;\n\n                            case 8:\n                              _context2.next = 10;\n                              return new PipelineStage().getById(stage.id).then(function (data) {\n                                Object.assign(data, stage);\n                                data['index'] = stage.index;\n\n                                if (data['title'] != stage.title) {\n                                  data['title'] = stage.title;\n                                }\n\n                                if (data['stage_type'] != stage.stage_type) {\n                                  data['stage_type'] = stage.stage_type;\n                                }\n\n                                data.update();\n                              });\n\n                            case 10:\n                              if (!(stage.deleted == true)) {\n                                _context2.next = 13;\n                                break;\n                              }\n\n                              _context2.next = 13;\n                              return new PipelineStage().getById(stage.id).then(function (data) {\n                                data.delete();\n                                console.log('Done ', stage.title);\n                              });\n\n                            case 13:\n                              return _context2.abrupt(\"return\", stage);\n\n                            case 14:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    return function (_x3) {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }());\n\n                case 4:\n                  pArray = _context3.sent;\n                  _context3.next = 7;\n                  return Promise.all(pArray);\n\n                case 7:\n                  _this2.cachePipeline.list_state = _this2.cachePipeline.list_state.filter(function (stage) {\n                    return !stage.deleted;\n                  });\n                  new Pipeline().getById(_this2.currentPipeline.id).then(function (data) {\n                    Object.assign(data, _this2.cachePipeline);\n                    delete data['list_state'];\n                    data.update().then(function (_data) {\n                      _this2.listPipeline.splice(_this2.index, 1, data);\n\n                      _this2.setListPipeline(_this2.listPipeline);\n\n                      resolve();\n                    });\n                  });\n\n                case 9:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"createNewPipeline\",\n    value: function createNewPipeline() {\n      var _this3 = this;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee6(resolve, reject) {\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _this3.newPositionPipeline = new Pipeline();\n\n                  _this3.changeIndexListStage();\n\n                  Object.assign(_this3.newPositionPipeline, _this3.cachePipeline);\n                  _this3.newPositionPipeline['title'] = _this3.title;\n                  delete _this3.newPositionPipeline['list_state']; //@ts-ignore\n\n                  _this3.newPositionPipeline.insert().then(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref5 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee5(data) {\n                      var pArray;\n                      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              pArray = _this3.cachePipeline.list_state.map(\n                              /*#__PURE__*/\n                              function () {\n                                var _ref6 = _asyncToGenerator(\n                                /*#__PURE__*/\n                                regeneratorRuntime.mark(function _callee4(stage) {\n                                  var _newStage;\n\n                                  return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                                    while (1) {\n                                      switch (_context4.prev = _context4.next) {\n                                        case 0:\n                                          if (stage.pipeline_id == '') stage.pipeline_id = data.id;\n\n                                          if (!((stage.id == '' || stage.pipeline_id == 'default') && !stage.deleted)) {\n                                            _context4.next = 7;\n                                            break;\n                                          }\n\n                                          _newStage = new PipelineStage();\n                                          Object.assign(_newStage, stage);\n                                          _newStage.pipeline_id = data.id;\n                                          _context4.next = 7;\n                                          return _newStage.insert().then(function (_data) {\n                                            stage.id = _data.id;\n                                          });\n\n                                        case 7:\n                                          return _context4.abrupt(\"return\", stage);\n\n                                        case 8:\n                                        case \"end\":\n                                          return _context4.stop();\n                                      }\n                                    }\n                                  }, _callee4);\n                                }));\n\n                                return function (_x7) {\n                                  return _ref6.apply(this, arguments);\n                                };\n                              }());\n                              _context5.next = 3;\n                              return Promise.all(pArray);\n\n                            case 3:\n                              //@ts-ignore\n                              _this3.newPositionPipeline.update().then(function (data) {\n                                var _array = _this3.listPipeline.concat(data);\n\n                                _this3.setListPipeline(_array);\n\n                                resolve();\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n\n                    return function (_x6) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }());\n\n                case 6:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        return function (_x4, _x5) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"_getAllStages\",\n    value: function () {\n      var _getAllStages2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(type) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", new PipelineStage().getAllStages(type));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function _getAllStages(_x8) {\n        return _getAllStages2.apply(this, arguments);\n      }\n\n      return _getAllStages;\n    }()\n  }, {\n    key: \"handleOpenModal\",\n    value: function () {\n      var _handleOpenModal = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8() {\n        var _this4 = this;\n\n        var _data;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _data = {};\n                this.isErrorInput = false; // this.changeIndexListStage();\n                // Use cloneDeep cuz remove Observer Property in Object.\n\n                if (!(String(this.type) == 'new')) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _data = {\n                  company_id: this.currentCompany.id,\n                  list_state: _.cloneDeep(this.listPipelineStage),\n                  title: ''\n                };\n                this.cloneListPipelineStage = _.cloneDeep(this.listPipelineStage);\n                this.title = '';\n                _context8.next = 12;\n                break;\n\n              case 8:\n                _context8.next = 10;\n                return this._getAllStages(this.currentPipeline.id).then(function (data) {\n                  _data = {\n                    company_id: _this4.currentCompany.id,\n                    list_state: data\n                  };\n                  _this4.title = _this4.currentPipeline.title;\n                  _this4.cloneListPipelineStage = _.cloneDeep(data);\n                });\n\n              case 10:\n                _context8.next = 12;\n                return this.setListStageToPipeline({\n                  id: this.currentPipeline.id,\n                  content: _data['list_state']\n                });\n\n              case 12:\n                _context8.next = 14;\n                return this.setCachePipeline(_data);\n\n              case 14:\n                _context8.next = 16;\n                return console.log(_data);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handleOpenModal() {\n        return _handleOpenModal.apply(this, arguments);\n      }\n\n      return handleOpenModal;\n    }()\n  }, {\n    key: \"removePipelineStage\",\n    value: function removePipelineStage(index) {\n      this.cachePipeline.list_state[index]['deleted'] = true;\n      this.cachePipeline.list_state.splice(index, 1, this.cachePipeline.list_state[index]);\n      this.setCachePipeline(this.cachePipeline);\n    }\n  }, {\n    key: \"handleOpenModalAddStage\",\n    value: function handleOpenModalAddStage(type, state, index) {\n      this.showModalAddState = true;\n      this.typeOfModalAddPipelineStage = type;\n\n      if (type == 'new') {\n        this.currentState = null;\n        this.titleState = '';\n      } else {\n        this.currentState = state; // indexInCurrentArray is position of this item in list_state of state\n\n        this.currentState['indexInCurrentArray'] = index;\n        this.titleState = this.currentState['title'];\n      }\n    }\n  }, {\n    key: \"handleCloseModal\",\n    value: function handleCloseModal() {\n      var compareTitle = '';\n      var compareStage = false;\n\n      if (!this.isSavedChange) {\n        this.cloneListPipelineStage.forEach(function (stage) {\n          delete stage['firestore'];\n          delete stage['updatedAt'];\n          delete stage['createdAt'];\n        });\n        var checkArray = [];\n\n        if (this.type == 'new') {\n          compareTitle = this.cachePipeline.title;\n          checkArray = _.cloneDeep(this.cachePipeline.list_state);\n          checkArray.forEach(function (stage) {\n            delete stage['firestore'];\n            delete stage['updatedAt'];\n            delete stage['createdAt'];\n          });\n          compareStage = _.isMatch(this.cloneListPipelineStage, checkArray);\n        } else {\n          compareTitle = this.currentPipeline.title;\n          checkArray = _.cloneDeep(this.currentPipeline.list_state);\n          checkArray.forEach(function (stage) {\n            delete stage['firestore'];\n            delete stage['updatedAt'];\n            delete stage['createdAt'];\n          });\n          console.log(this.cloneListPipelineStage);\n          compareStage = _.isMatch(this.cloneListPipelineStage, checkArray, _.isEqual);\n        } // Compare\n\n\n        if (!compareStage || this.title != compareTitle) {\n          this.showModalUnSavedChange = true;\n          return;\n        }\n      }\n\n      this.showModalUnSavedChange = false;\n      this.title = '';\n      this.isSavedChange = false;\n      this.$emit('handleClose');\n    }\n  }]);\n\n  return AddEditPipeline;\n}(Vue);\n\ntslib_1.__decorate([Prop(Boolean)], AddEditPipeline.prototype, \"showModal\", void 0);\n\ntslib_1.__decorate([Prop(String)], AddEditPipeline.prototype, \"type\", void 0);\n\ntslib_1.__decorate([Prop(Number)], AddEditPipeline.prototype, \"index\", void 0);\n\ntslib_1.__decorate([Getter('cachePipeline')], AddEditPipeline.prototype, \"cachePipeline\", void 0);\n\ntslib_1.__decorate([Getter('currentPipeline')], AddEditPipeline.prototype, \"currentPipeline\", void 0);\n\ntslib_1.__decorate([Getter('listPipeline')], AddEditPipeline.prototype, \"listPipeline\", void 0);\n\ntslib_1.__decorate([Getter('listPipelineStage')], AddEditPipeline.prototype, \"listPipelineStage\", void 0);\n\ntslib_1.__decorate([Getter('currentCompany')], AddEditPipeline.prototype, \"currentCompany\", void 0);\n\ntslib_1.__decorate([Action('setListStage')], AddEditPipeline.prototype, \"setListStage\", void 0);\n\ntslib_1.__decorate([Action('setListPipeline')], AddEditPipeline.prototype, \"setListPipeline\", void 0);\n\ntslib_1.__decorate([Action('setCachePipeline')], AddEditPipeline.prototype, \"setCachePipeline\", void 0);\n\ntslib_1.__decorate([Action('setCurrentPipeline')], AddEditPipeline.prototype, \"setCurrentPipeline\", void 0);\n\ntslib_1.__decorate([Action('setListStageToPipeline')], AddEditPipeline.prototype, \"setListStageToPipeline\", void 0);\n\nAddEditPipeline = tslib_1.__decorate([Component({\n  components: {\n    UnSavedChangeModal: UnSavedChangeModal,\n    AddStageModal: AddStageModal,\n    draggable: draggable\n  },\n  computed: _objectSpread({}, mapGetters(['currentCompany', 'listPipelineStage', 'listPipeline', 'cachePipeline', 'currentPipeline']), {\n    disabledInputTitle: function disabledInputTitle() {\n      var that = this;\n      return that.type == 'edit' && that.currentPipeline.is_default == true;\n    }\n  }),\n  methods: _objectSpread({}, mapActions('action', ['setListPipelineStage', 'setListPipeline', 'setCachePipeline', 'setCurrentPipeline']))\n})], AddEditPipeline);\nexport default AddEditPipeline;",{"version":3,"sources":["/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport draggable from 'vuedraggable';\nimport Vue from \"vue\";\nimport {fauth} from '@/firebase';\nimport {mapGetters, mapActions} from 'vuex';\nimport AddStageModal from './AddStageModal.vue';\nimport Pipeline from \"@/models/Pipeline\";\nimport PipelineStage from \"@/models/PipelineStage\";\nimport {Component, Prop, Emit} from \"vue-property-decorator\";\nimport UnSavedChangeModal from '@/components/modals/PinelineStage/UnsavedChange.vue';\nimport {\n    State,\n    Getter,\n    Action,\n    Mutation,\n    namespace\n} from 'vuex-class'\nimport {messages} from \"@/messages\";\n\nconst _ = require('lodash');\n@Component({\n    components: {\n        UnSavedChangeModal,\n        AddStageModal,\n        draggable,\n    },\n    computed: {\n        // mix the getters into computed with object spread operator\n        ...mapGetters([\n            'currentCompany',\n            'listPipelineStage',\n            'listPipeline',\n            'cachePipeline',\n            'currentPipeline'\n        ]),\n        disabledInputTitle(){\n            let that = this as any;\n            return that.type == 'edit' && that.currentPipeline.is_default == true;\n        }\n    },\n    methods: {\n        ...mapActions('action', [\n            'setListPipelineStage',\n            'setListPipeline',\n            'setCachePipeline',\n            'setCurrentPipeline'\n        ]),\n    },\n})\nexport default class AddEditPipeline extends Vue {\n    @Prop(Boolean) showModal: false;\n    @Prop(String) type: 'new';\n    @Prop(Number) index: 1;\n\n    @Getter('cachePipeline') cachePipeline;\n    @Getter('currentPipeline') currentPipeline;\n    @Getter('listPipeline') listPipeline;\n    @Getter('listPipelineStage') listPipelineStage;\n    @Getter('currentCompany') currentCompany;\n\n    @Action('setListStage') setListStage;\n    @Action('setListPipeline') setListPipeline;\n    @Action('setCachePipeline') setCachePipeline;\n    @Action('setCurrentPipeline') setCurrentPipeline;\n    @Action('setListStageToPipeline') setListStageToPipeline;\n\n    showModalAddState: boolean = false;\n    title: string = '';\n    showModalUnSavedChange: boolean = false;\n    drag: boolean = false;\n    titleState: string = '';\n    currentState: object = {};\n    newPositionPipeline: object = {} as Pipeline || {};\n    typeOfModalAddPipelineStage: string = 'new';\n    isErrorInput: boolean = false;\n    isProcessing: boolean = false;\n    isSavedChange: boolean = false;\n    cloneListPipelineStage: Array<object> = [];\n\n    changeIndexListStage() {\n        // let lengthDefaultStage = _.sumBy(this.cachePipeline.list_state, (stage) => {\n        //     return stage.index == 0;\n        // })\n        Object.freeze(this.listPipelineStage)\n        this.cachePipeline.list_state.map((stage, index) => {\n            if (stage.index > 0) {\n                stage.index = index;\n            }\n            return stage;\n        })\n    }\n\n    onMove({relatedContext, draggedContext}) {\n        const relatedElement = relatedContext.element;\n        const draggedElement = draggedContext.element;\n        let indexRelatedElement = relatedElement.index;\n        let indexDraggedElement = draggedElement.index;\n        console.log(draggedElement.title, 'to', indexRelatedElement)\n        console.log(relatedElement.title, 'to', indexDraggedElement)\n        relatedElement.index = indexDraggedElement;\n        draggedElement.index = indexRelatedElement;\n        return (\n            (!relatedElement || !relatedElement.fixed) && !draggedElement.fixed\n        );\n    }\n\n    dragOptions() {\n        return {\n            animation: 0,\n            group: \"description\",\n            ghostClass: \"ghost\"\n        };\n    }\n\n    handleSaveChange() {\n        this.showModalUnSavedChange = false;\n        this.isSavedChange = true;\n        this.saveChange();\n    }\n\n    handleCloseUnSavedChange() {\n        this.showModalUnSavedChange = false;\n        this.$emit('handleClose');\n    }\n\n    async saveChange() {\n        if (this.title.trim() == '') {\n            this.isErrorInput = true;\n            return;\n        } else {\n            this.isErrorInput = false;\n        }\n        this.isProcessing = true;\n        switch (String(this.type)) {\n            case 'new':\n                await this.createNewPipeline();\n                break;\n            case 'edit':\n                await this.editPipeline();\n                break;\n        }\n        this.isProcessing = false;\n        this.isSavedChange = true;\n        await this.handleCloseModal();\n    }\n\n    editPipeline() {\n        return new Promise(async (resolve, reject) => {\n            this.cachePipeline.title = this.title;\n            this.changeIndexListStage();\n            const pArray = await this.cachePipeline.list_state.map(async (stage) => {\n                if (stage.id == '') {\n                    let _newStage = new PipelineStage();\n                    Object.assign(_newStage, stage);\n                    _newStage.pipeline_id = this.currentPipeline.id;\n                    await _newStage.insert().then((data) => {\n                        stage.id = data.id;\n                        stage.pipeline_id = data['pipeline_id'];\n                    })\n                } else {\n                    await new PipelineStage().getById(stage.id).then((data) => {\n                        Object.assign(data, stage);\n                        data['index'] = stage.index;\n                        if (data['title'] != stage.title) {\n                            data['title'] = stage.title;\n                        }\n                        if (data['stage_type'] != stage.stage_type) {\n                            data['stage_type'] = stage.stage_type;\n                        }\n                        data.update();\n                    })\n                }\n                if (stage.deleted == true) {\n                    await new PipelineStage().getById(stage.id).then((data) => {\n                        data.delete();\n                        console.log('Done ', stage.title);\n                    })\n                }\n                return stage;\n            });\n            await Promise.all(pArray);\n            this.cachePipeline.list_state = this.cachePipeline.list_state.filter((stage) => {\n                return !stage.deleted;\n            })\n            new Pipeline().getById(this.currentPipeline.id).then((data) => {\n                Object.assign(data, this.cachePipeline);\n                delete data['list_state'];\n                data.update().then((_data) => {\n                    this.listPipeline.splice(this.index, 1, data);\n                    this.setListPipeline(this.listPipeline);\n                    resolve();\n                });\n            });\n        })\n\n\n    }\n\n    createNewPipeline() {\n        return new Promise(async (resolve, reject) => {\n            this.newPositionPipeline = new Pipeline();\n            this.changeIndexListStage();\n            Object.assign(this.newPositionPipeline, this.cachePipeline);\n            this.newPositionPipeline['title'] = this.title;\n            delete this.newPositionPipeline['list_state'];\n            //@ts-ignore\n            this.newPositionPipeline.insert()\n                .then(async (data) => {\n                    const pArray = this.cachePipeline.list_state.map(async (stage) => {\n                        if (stage.pipeline_id == '') stage.pipeline_id = data.id;\n                        if ((stage.id == '' || stage.pipeline_id == 'default') && !stage.deleted) {\n                            let _newStage = new PipelineStage();\n                            Object.assign(_newStage, stage);\n                            _newStage.pipeline_id = data.id;\n                            await _newStage.insert().then((_data) => {\n                                stage.id = _data.id;\n                            })\n                        }\n                        return stage;\n                    });\n                    await Promise.all(pArray);\n                    //@ts-ignore\n                    this.newPositionPipeline.update().then((data) => {\n                        let _array = this.listPipeline.concat(data);\n                        this.setListPipeline(_array);\n                        resolve();\n                    })\n                })\n        })\n\n    }\n\n    async _getAllStages(type) {\n        return new PipelineStage().getAllStages(type);\n    }\n\n    async handleOpenModal() {\n        let _data = {};\n        this.isErrorInput = false;\n        // this.changeIndexListStage();\n\n        // Use cloneDeep cuz remove Observer Property in Object.\n        if (String(this.type) == 'new') {\n            _data = {\n                company_id: this.currentCompany.id,\n                list_state: _.cloneDeep(this.listPipelineStage),\n                title: '',\n            };\n            this.cloneListPipelineStage = _.cloneDeep(this.listPipelineStage);\n            this.title = '';\n        } else {\n            await this._getAllStages(this.currentPipeline.id).then((data) => {\n                _data = {\n                    company_id: this.currentCompany.id,\n                    list_state: data,\n                };\n                this.title = this.currentPipeline.title;\n                this.cloneListPipelineStage = _.cloneDeep(data);\n            });\n            // alert(this.title);\n            await this.setListStageToPipeline({id: this.currentPipeline.id, content: _data['list_state']});\n        }\n        await this.setCachePipeline(_data);\n        await console.log(_data)\n    }\n\n    removePipelineStage(index) {\n        this.cachePipeline.list_state[index]['deleted'] = true;\n        this.cachePipeline.list_state.splice(index, 1, this.cachePipeline.list_state[index]);\n        this.setCachePipeline(this.cachePipeline);\n    }\n\n    handleOpenModalAddStage(type, state, index) {\n        this.showModalAddState = true;\n        this.typeOfModalAddPipelineStage = type;\n        if (type == 'new') {\n            this.currentState = null;\n            this.titleState = '';\n        } else {\n            this.currentState = state;\n            // indexInCurrentArray is position of this item in list_state of state\n            this.currentState['indexInCurrentArray'] = index;\n            this.titleState = this.currentState['title'];\n        }\n    }\n\n    handleCloseModal() {\n        let compareTitle = '';\n        let compareStage = false;\n        if (!this.isSavedChange) {\n            this.cloneListPipelineStage.forEach((stage) => {\n                delete stage['firestore'];\n                delete stage['updatedAt'];\n                delete stage['createdAt'];\n            })\n            let checkArray = [];\n            if (this.type == 'new') {\n                compareTitle = this.cachePipeline.title;\n                checkArray = _.cloneDeep(this.cachePipeline.list_state)\n                checkArray.forEach((stage) => {\n                    delete stage['firestore'];\n                    delete stage['updatedAt'];\n                    delete stage['createdAt'];\n                })\n                compareStage =  _.isMatch(this.cloneListPipelineStage, checkArray)\n            } else {\n                compareTitle = this.currentPipeline.title;\n                checkArray = _.cloneDeep(this.currentPipeline.list_state)\n                checkArray.forEach((stage) => {\n                    delete stage['firestore'];\n                    delete stage['updatedAt'];\n                    delete stage['createdAt'];\n                })\n                console.log(this.cloneListPipelineStage)\n                compareStage =  _.isMatch(this.cloneListPipelineStage, checkArray, _.isEqual)\n            }\n\n\n            // Compare\n            if (!compareStage || this.title != compareTitle){\n                this.showModalUnSavedChange = true;\n                return;\n            }\n        }\n        this.showModalUnSavedChange = false;\n        this.title = '';\n        this.isSavedChange = false;\n        this.$emit('handleClose')\n    }\n}\n"],"sourceRoot":""}]}