{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js!/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Data/app.cloudjet.work/src/models/base.ts","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/models/base.ts","mtime":1557830879591},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832}],"contextDependencies":[],"result":["import _typeof from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { db } from '@/firebase/index';\n/*\n\nĐây là base Model, chúng ta sẽ viết những methods thường xuyên sử dụng cho các Models, ví dụ:\n\n- insert\n- update\n- delete\n- getById\n- query...\n\n */\n\nvar Model =\n/*#__PURE__*/\nfunction () {\n  function Model(COLLECTION) {\n    _classCallCheck(this, Model);\n\n    this.id = \"\";\n    this.createdAt = Date.now();\n    this.updatedAt = Date.now();\n    this.firestore = db;\n    this.COLLECTION = COLLECTION;\n    this.constructor['COLLECTION'] = COLLECTION;\n  } // create new instance, not single instance, instead of (new Model())\n\n\n  _createClass(Model, [{\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      Object.assign(this, data);\n    }\n  }, {\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var modelCollection, result, model;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                modelCollection = this.firestore.collection(this.COLLECTION);\n                result = _objectSpread({}, this);\n                delete result['firestore'];\n                delete result['COLLECTION'];\n                delete result['id']; //const {TIMESTAMP} = firebase.database.ServerValue;\n\n                result.createdAt = Date.now(); //TIMESTAMP;\n\n                result.updatedAt = Date.now(); //TIMESTAMP;\n\n                _context.next = 9;\n                return modelCollection.add(JSON.parse(JSON.stringify(result)));\n\n              case 9:\n                model = _context.sent;\n                this.id = model.id;\n                return _context.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function insert() {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }()\n  }, {\n    key: \"upsert\",\n    value: function () {\n      var _upsert = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.id) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.update();\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n                _context2.next = 8;\n                return this.insert();\n\n              case 8:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function upsert() {\n        return _upsert.apply(this, arguments);\n      }\n\n      return upsert;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var modelCollection, result, id, model;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                modelCollection = this.firestore.collection(this.COLLECTION);\n                result = _objectSpread({}, this);\n                id = result['id'];\n                delete result['firestore'];\n                delete result['COLLECTION'];\n                delete result['id']; // const {TIMESTAMP} = firebase.database.ServerValue;\n\n                result.updatedAt = Date.now(); // @ts-ignore\n\n                _context3.next = 9;\n                return modelCollection.doc(id).set(JSON.parse(JSON.stringify(result), {\n                  merge: true\n                }));\n\n              case 9:\n                model = _context3.sent;\n                return _context3.abrupt(\"return\", this);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function update() {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var modelCollection, record;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                modelCollection = this.firestore.collection(this.COLLECTION);\n                _context4.next = 3;\n                return modelCollection.doc(this.id);\n\n              case 3:\n                record = _context4.sent;\n                return _context4.abrupt(\"return\", record.delete());\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"collection\",\n    value: function collection() {\n      return db.collection(this.COLLECTION);\n    }\n  }, {\n    key: \"getById\",\n    value: function () {\n      var _getById = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(id) {\n        var modelCollection, record;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                modelCollection = this.firestore.collection(this.COLLECTION);\n                _context5.next = 3;\n                return modelCollection.doc(id).get();\n\n              case 3:\n                record = _context5.sent;\n\n                if (record.exists) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                throw new Error(\"\".concat(this.COLLECTION, \" \").concat(id, \" not found\"));\n\n              case 6:\n                this.id = record.id;\n                Object.assign(this, record.data()); // test\n\n                this.onChange(function () {});\n                return _context5.abrupt(\"return\", this);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getById(_x) {\n        return _getById.apply(this, arguments);\n      }\n\n      return getById;\n    }()\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      var _this = this;\n\n      var collection = this.firestore.collection(this.COLLECTION);\n      if (!this.id) return;\n      collection.doc(this.id).onSnapshot(function (docSnap) {\n        if (typeof callback === \"function\") {\n          var isPreventDefault = callback(null, docSnap.data());\n\n          if (!isPreventDefault) {\n            // console.info(\"Auto update object: \", this);\n            Object.assign(_this, docSnap.data());\n          }\n        }\n      }, function (error) {\n        if (typeof callback === \"function\") {\n          callback(error, null);\n        }\n      });\n    }\n  }], [{\n    key: \"from\",\n    value: function from() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var id = arguments.length > 1 ? arguments[1] : undefined;\n      var newObj = this.instance;\n      var obj = _typeof(data) === 'object' ? data : {};\n      Object.assign(newObj, obj, {\n        id: id\n      }); // test\n\n      newObj.onChange(function () {});\n      return newObj;\n    }\n  }, {\n    key: \"instance\",\n    get: function get() {\n      throw new TypeError('override this');\n    }\n  }]);\n\n  return Model;\n}();\n\nexport { Model as default };",null]}