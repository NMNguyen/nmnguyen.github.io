{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-2!/Volumes/Data/app.cloudjet.work/src/models/Task.ts","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/models/Task.ts","mtime":1557830879590},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _get from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/get\";\nimport _inherits from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport Model from \"./base\";\nimport Company from \"@/models/Company\";\nimport { store } from \"@/store/store\";\nimport Candidate from \"@/models/Candidate\";\nimport User from \"@/models/User\";\nimport { Settings } from 'luxon';\nSettings.defaultLocale = 'vi';\n\nvar Task =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(Task, _Model);\n\n  function Task() {\n    var _this;\n\n    _classCallCheck(this, Task);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Task).call(this, \"tasks\"));\n    _this.title = \"\";\n    _this.description = \"\";\n    _this.is_done = false;\n    _this._deadline = Date.now();\n    _this.files = [];\n    _this.assignee_id = \"\";\n    _this.company_id = \"\";\n    _this.candidate_id = \"\";\n    _this.assignee = null;\n    _this.title = \"Tên công việc\";\n    _this._deadline = Date.now();\n\n    try {\n      _this.company_id = store.getters.currentCompany.id;\n    } catch (e) {}\n\n    try {\n      _this.assignee_id = store.getters.currentUser.id;\n    } catch (e) {}\n\n    return _this;\n  }\n\n  _createClass(Task, [{\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                delete this['assignee']; // do not want to save this back to firestore\n\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(Task.prototype), \"insert\", this).call(this));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function insert() {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                delete this['assignee']; // do not want to save this back to firestore\n\n                return _context2.abrupt(\"return\", _get(_getPrototypeOf(Task.prototype), \"update\", this).call(this));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function update() {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"getAssignee\",\n    value: function () {\n      var _getAssignee = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.assignee_id != \"\")) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                if (this.assignee) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.next = 4;\n                return User.instance.getById(this.assignee_id);\n\n              case 4:\n                this.assignee = _context3.sent;\n\n              case 5:\n                return _context3.abrupt(\"return\", this.assignee);\n\n              case 8:\n                _context3.next = 10;\n                return new User();\n\n              case 10:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAssignee() {\n        return _getAssignee.apply(this, arguments);\n      }\n\n      return getAssignee;\n    }()\n  }, {\n    key: \"getCompany\",\n    value: function () {\n      var _getCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", new Company().getById(this.company_id));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getCompany() {\n        return _getCompany.apply(this, arguments);\n      }\n\n      return getCompany;\n    }()\n  }, {\n    key: \"getCandidate\",\n    value: function () {\n      var _getCandidate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", new Candidate().getById(this.candidate_id));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getCandidate() {\n        return _getCandidate.apply(this, arguments);\n      }\n\n      return getCandidate;\n    }()\n  }, {\n    key: \"getAllTasks\",\n    value: function () {\n      var _getAllTasks = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var counter,\n            results,\n            company,\n            modelCollection,\n            records,\n            docs,\n            index,\n            docSnapshot,\n            record,\n            _args6 = arguments;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                counter = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : 10;\n                results = new Array();\n                company = store.getters.currentCompany;\n\n                if (!company) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                modelCollection = this.firestore.collection(this.COLLECTION);\n                _context6.next = 7;\n                return modelCollection.where(\"company_id\", \"==\", company.id).orderBy(\"updatedAt\", \"desc\").limit(counter).get();\n\n              case 7:\n                records = _context6.sent;\n                docs = records.docs;\n                _context6.t0 = regeneratorRuntime.keys(docs);\n\n              case 10:\n                if ((_context6.t1 = _context6.t0()).done) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                index = _context6.t1.value;\n                // debugger;\n                docSnapshot = docs[index];\n                record = Task.from(docSnapshot.data(), docSnapshot.id);\n                _context6.next = 16;\n                return record.getAssignee();\n\n              case 16:\n                record.assignee = _context6.sent;\n                // console.log(record.assignee);\n                results.push(record);\n                _context6.next = 10;\n                break;\n\n              case 20:\n                return _context6.abrupt(\"return\", results);\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAllTasks() {\n        return _getAllTasks.apply(this, arguments);\n      }\n\n      return getAllTasks;\n    }()\n  }, {\n    key: \"deadline\",\n    get: function get() {\n      return new Date(this._deadline).toISOString();\n    },\n    set: function set(val) {\n      try {\n        this._deadline = new Date(val).getTime();\n      } catch (e) {\n        this._deadline = new Date().getTime();\n      }\n    }\n  }], [{\n    key: \"instance\",\n    get: function get() {\n      return new Task();\n    }\n  }]);\n\n  return Task;\n}(Model);\n\nexport { Task as default };",{"version":3,"sources":["/Volumes/Data/app.cloudjet.work/src/models/Task.ts"],"names":[],"mappings":"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","sourcesContent":["import Model from './base';\nimport Company from \"@/models/Company\";\nimport {store} from \"@/store/store\";\nimport Candidate from \"@/models/Candidate\";\nimport User from \"@/models/User\";\nimport moment from \"moment\";\n\nimport {Settings} from 'luxon';\n\nSettings.defaultLocale = 'vi';\nexport default class Task extends Model {\n    title: string = \"\";\n    description: string = \"\";toLocaleString\n    is_done: boolean = false;\n    private _deadline: number = Date.now();\n    files: { name: string, url: string }[] = [];\n    assignee_id = \"\";\n    company_id = \"\";\n    candidate_id = \"\";\n    assignee: User | null = null;\n\n    constructor() {\n        super(\"tasks\");\n        this.title = \"Tên công việc\";\n        this._deadline = Date.now();\n        try {\n            this.company_id = store.getters.currentCompany.id;\n        } catch (e) {\n\n        }\n\n        try {\n            this.assignee_id = store.getters.currentUser.id;\n        } catch (e) {\n\n        }\n    }\n\n    static get instance(): Task {\n        return new Task();\n    }\n\n    get deadline(): string {\n        return new Date(this._deadline).toISOString();\n    }\n\n    set deadline(val: string) {\n        try {\n            this._deadline = new Date(val).getTime();\n        } catch (e) {\n            this._deadline = new Date().getTime();\n        }\n    }\n\n    async insert(): Promise<Task> {\n\n        delete this['assignee']; // do not want to save this back to firestore\n        return super.insert() as Promise<Task>;\n\n    }\n\n\n    async update(): Promise<Task> {\n\n        delete this['assignee']; // do not want to save this back to firestore\n        return super.update() as Promise<Task>;\n\n    }\n\n\n    public async getAssignee(): Promise<User> {\n        if (this.assignee_id != \"\") {\n            if (!this.assignee) {\n                this.assignee = await User.instance.getById(this.assignee_id) as User;\n            }\n            return this.assignee;\n        } else {\n            return await new User();\n        }\n\n\n    }\n\n\n    public async getCompany(): Promise<Company> {\n\n        return (new Company()).getById(this.company_id) as Promise<Company>;\n    }\n\n\n    public async getCandidate(): Promise<Candidate> {\n\n        return (new Candidate()).getById(this.candidate_id) as Promise<Candidate>;\n    }\n\n    public async getAllTasks(counter: number = 10): Promise<Task[]> {\n        const results: Task[] = new Array();\n\n        let company = store.getters.currentCompany;\n\n        if (company) {\n\n            const modelCollection = this.firestore.collection(this.COLLECTION);\n            const records = await modelCollection.where(\"company_id\", \"==\", company.id)\n                .orderBy(\"updatedAt\", \"desc\")\n                .limit(counter).get();\n\n\n            const docs = records.docs;\n\n            for (let index in docs) {\n                // debugger;\n                let docSnapshot = docs[index];\n                const record = Task.from(docSnapshot.data(), docSnapshot.id) as Task;\n                record.assignee = await record.getAssignee();\n                // console.log(record.assignee);\n\n                results.push(record);\n            }\n        }\n        // console.info(`tasks:`);\n        // console.info(results);\n\n\n        return results\n    }\n\n\n}\n"],"sourceRoot":""}]}