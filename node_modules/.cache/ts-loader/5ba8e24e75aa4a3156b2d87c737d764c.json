{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js!/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Data/app.cloudjet.work/src/store/store.ts","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/store/store.ts","mtime":1557830879593},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.find-index\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport firebase from 'firebase/app';\nimport Company from \"@/models/Company\";\nimport User from \"@/models/User\";\nimport Router from \"../router\";\nimport Task from \"@/models/Task\";\nVue.use(Vuex);\nimport ModalModule from \"./modals/store\";\nimport PositionPipeline from \"./position_pipeline/store\";\nexport var store = new Vuex.Store({\n  modules: {\n    modals: ModalModule,\n    position_pipeline: PositionPipeline\n  },\n  state: {\n    user: null,\n    users: [],\n    company: null,\n    task: null\n  },\n  getters: {\n    currentUser: function currentUser(state) {\n      return state.user;\n    },\n    companyUsers: function companyUsers(state) {\n      return state.users;\n    },\n    getTask: function getTask(state) {\n      if (state.task == null) {\n        state.task = new Task();\n      }\n\n      return state.task;\n    },\n    currentCompany: function currentCompany(state) {\n      return state.company;\n    }\n  },\n  mutations: {\n    updateCurrentTask: function updateCurrentTask(state, task) {\n      state.task = task;\n      state.modals.addTask = true;\n    },\n    setUser: function setUser(state, user) {\n      state.user = user;\n    },\n    setCompanyUser: function setCompanyUser(state, data) {\n      var userIndex = state.users.findIndex(function (val) {\n        return val.id === data.id;\n      });\n      state.users[userIndex] = data;\n    },\n    setUsers: function setUsers(state, users) {\n      state.users = users;\n    },\n    setCompany: function setCompany(state, company) {\n      state.company = company;\n    },\n    clearCurrentTask: function clearCurrentTask(state) {\n      state.task = new Task();\n    }\n  },\n  actions: {\n    setUser: function () {\n      var _setUser = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(context) {\n        var fuser, user, company, users;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fuser = firebase.auth().currentUser;\n\n                if (!fuser) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 4;\n                return new User().getById(fuser.uid);\n\n              case 4:\n                user = _context.sent;\n                _context.next = 7;\n                return new Company().getById(user.company_id);\n\n              case 7:\n                company = _context.sent;\n                _context.next = 10;\n                return new User().getAllUsers(user.company_id);\n\n              case 10:\n                users = _context.sent;\n                context.commit(\"setUser\", user);\n                context.commit(\"setCompany\", company);\n                context.commit(\"setUsers\", users);\n                _context.next = 17;\n                break;\n\n              case 16:\n                Router.push('/login');\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function setUser(_x) {\n        return _setUser.apply(this, arguments);\n      }\n\n      return setUser;\n    }()\n  }\n});",null]}