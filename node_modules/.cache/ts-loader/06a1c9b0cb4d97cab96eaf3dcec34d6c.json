{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-2!/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/settings/General.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/settings/General.vue","mtime":1557830879581},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport Vue from \"vue\";\nimport { mapGetters } from 'vuex';\nimport ModalWrapper from \"@/components/ModalWrapper.vue\";\nexport default Vue.extend({\n  data: function data() {\n    return {\n      saveflag: false,\n      name: ''\n    };\n  },\n  components: {\n    ModalWrapper: ModalWrapper\n  },\n  props: {},\n  computed: _objectSpread({}, mapGetters(['currentUser', 'currentCompany'])),\n  watch: {\n    currentCompany: function currentCompany(company) {\n      var self = this;\n      self.name = company.name;\n    }\n  },\n  mounted: function mounted() {\n    var self = this;\n\n    if (self.currentCompany) {\n      self.name = self.currentCompany.name;\n    }\n  },\n  methods: {\n    updateCompany: function updateCompany() {\n      var self = this;\n      self.currentCompany.name = self.name;\n      self.currentCompany.update().then(function () {\n        self.saveflag = true;\n        setTimeout(function () {\n          self.saveflag = false;\n        }, 2000);\n      }).catch(function (err) {});\n    }\n  }\n});",{"version":3,"sources":["/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/settings/General.vue?vue&type=script&lang=ts&"],"names":[],"mappings":";;AAiCA,OAAO,GAAP,MAAgB,KAAhB;AAEA,SAAQ,UAAR,QAAyB,MAAzB;AACA,OAAO,YAAP,MAAyB,+BAAzB;AAGA,eAAe,GAAG,CAAC,MAAJ,CAAW;AACtB,EAAA,IADsB,kBAClB;AACA,WAAO;AACH,MAAA,QAAQ,EAAE,KADP;AAEH,MAAA,IAAI,EAAC;AAFF,KAAP;AAMH,GARqB;AAStB,EAAA,UAAU,EAAE;AACR,IAAA,YAAY,EAAZ;AADQ,GATU;AAYtB,EAAA,KAAK,EAAE,EAZe;AAatB,EAAA,QAAQ,oBAED,UAAU,CAAC,CACV,aADU,EAEV,gBAFU,CAAD,CAFT,CAbc;AAqBtB,EAAA,KAAK,EAAE;AACH,IAAA,cAAc,EAAE,wBAAU,OAAV,EAAiB;AAC7B,UAAM,IAAI,GAAG,IAAb;AACA,MAAA,IAAI,CAAC,IAAL,GAAY,OAAO,CAAC,IAApB;AACH;AAJE,GArBe;AA2BtB,EAAA,OAAO,EAAC,mBAAA;AACJ,QAAI,IAAI,GAAE,IAAV;;AAEA,QAAI,IAAI,CAAC,cAAT,EAAyB;AACnB,MAAA,IAAI,CAAC,IAAL,GAAa,IAAI,CAAC,cAAL,CAAoB,IAAjC;AACL;AACJ,GAjCqB;AAkCtB,EAAA,OAAO,EAAE;AACL,IAAA,aADK,2BACQ;AACT,UAAI,IAAI,GAAE,IAAV;AACA,MAAA,IAAI,CAAC,cAAL,CAAoB,IAApB,GAA4B,IAAI,CAAC,IAAjC;AAEA,MAAA,IAAI,CAAC,cAAL,CAAoB,MAApB,GAA6B,IAA7B,CAAkC,YAAA;AAC9B,QAAA,IAAI,CAAC,QAAL,GAAgB,IAAhB;AAEA,QAAA,UAAU,CAAC,YAAA;AACP,UAAA,IAAI,CAAC,QAAL,GAAgB,KAAhB;AACH,SAFS,EAEP,IAFO,CAAV;AAGH,OAND,EAMG,KANH,CAMS,UAAA,GAAG,EAAE,CAEb,CARD;AASH;AAdI;AAlCa,CAAX,CAAf","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport {fauth} from '@/firebase';\nimport {mapGetters} from 'vuex';\nimport ModalWrapper from \"@/components/ModalWrapper.vue\";\n\n\nexport default Vue.extend({\n    data() {\n        return {\n            saveflag: false,\n            name:'',\n\n        }\n\n    },\n    components: {\n        ModalWrapper,\n    },\n    props: {},\n    computed: {\n        // mix the getters into computed with object spread operator\n        ...mapGetters([\n            'currentUser',\n            'currentCompany',\n            // ...\n        ]),\n    },\n    watch: {\n        currentCompany: function (company) {\n            const self = this;\n            self.name = company.name;\n        }\n    },\n    mounted:function () {\n        var self =this;\n\n        if (self.currentCompany) {\n              self.name =  self.currentCompany.name;\n        }\n    },\n    methods: {\n        updateCompany(): void {\n            var self =this;\n            self.currentCompany.name =  self.name;\n\n            self.currentCompany.update().then(function () {\n                self.saveflag = true;\n\n                setTimeout(function () {\n                    self.saveflag = false;\n                }, 2000);\n            }).catch(err=>{\n\n            })\n        }\n    },\n});\n"],"sourceRoot":""}]}