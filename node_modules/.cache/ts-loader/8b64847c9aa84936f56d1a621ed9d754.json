{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-2!/Volumes/Data/app.cloudjet.work/src/models/Position.ts","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/models/Position.ts","mtime":1557830879590},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport Model from \"./base\";\nimport Company from \"@/models/Company\";\nimport { store } from \"@/store/store\";\n\nvar Position =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(Position, _Model);\n\n  function Position() {\n    var _this;\n\n    _classCallCheck(this, Position);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Position).call(this, \"positions\"));\n    _this.title = \"\";\n    _this.company_id = \"\";\n    return _this;\n  }\n\n  _createClass(Position, [{\n    key: \"getCompany\",\n    value: function () {\n      var _getCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", new Company().getById(this.company_id));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCompany() {\n        return _getCompany.apply(this, arguments);\n      }\n\n      return getCompany;\n    }()\n  }, {\n    key: \"getAllPositions\",\n    value: function () {\n      var _getAllPositions = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var results, company, modelCollection, records;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                results = new Array();\n                company = store.getters.currentCompany;\n\n                if (!company) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                modelCollection = this.firestore.collection(this.COLLECTION);\n                _context2.next = 6;\n                return modelCollection.where(\"company_id\", \"==\", company.id) // TODO .orderBy(\"updatedAt\", \"desc\")\n                .limit(20).get();\n\n              case 6:\n                records = _context2.sent;\n                records.forEach(function (docSnapshot) {\n                  var record = new Position();\n                  Object.assign(record, docSnapshot.data());\n                  record.id = docSnapshot.id;\n                  results.push(record);\n                });\n\n              case 8:\n                return _context2.abrupt(\"return\", results);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAllPositions() {\n        return _getAllPositions.apply(this, arguments);\n      }\n\n      return getAllPositions;\n    }()\n  }]);\n\n  return Position;\n}(Model);\n\nexport { Position as default };",{"version":3,"sources":["/Volumes/Data/app.cloudjet.work/src/models/Position.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,KAAP;AACA,OAAO,OAAP,MAAoB,kBAApB;AACA,SAAQ,KAAR,QAAoB,eAApB;;IAEqB,Q;;;;;AAajB,sBAAA;AAAA;;AAAA;;AACI,kFAAM,WAAN;AAZJ,UAAA,KAAA,GAAgB,EAAhB;AAEA,UAAA,UAAA,GAAa,EAAb;AASA;AAEC;;;;;;;;;;;;iDALW,IAAI,OAAJ,EAAD,CAAgB,OAAhB,CAAwB,KAAK,UAA7B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQD,gBAAA,O,GAAsB,IAAI,KAAJ,E;AAExB,gBAAA,O,GAAU,KAAK,CAAC,OAAN,CAAc,c;;qBAExB,O;;;;;AAEM,gBAAA,e,GAAkB,KAAK,SAAL,CAAe,UAAf,CAA0B,KAAK,UAA/B,C;;uBACF,eAAe,CAAC,KAAhB,CAAsB,YAAtB,EAAoC,IAApC,EAA0C,OAAO,CAAC,EAAlD,EAClB;AADkB,iBAEjB,KAFiB,CAEX,EAFW,EAGjB,GAHiB,E;;;AAAhB,gBAAA,O;AAON,gBAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,WAAW,EAAG;AAE1B,sBAAI,MAAM,GAAG,IAAI,QAAJ,EAAb;AAEA,kBAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,WAAW,CAAC,IAAZ,EAAtB;AACA,kBAAA,MAAM,CAAC,EAAP,GAAY,WAAW,CAAC,EAAxB;AACA,kBAAA,OAAO,CAAC,IAAR,CAAa,MAAb;AAEH,iBARD;;;kDAcG,O;;;;;;;;;;;;;;;;;;;EA9CuB,K;;SAAjB,Q","sourcesContent":["import Model from './base';\nimport Company from \"@/models/Company\";\nimport {store} from \"@/store/store\";\n\nexport default class Position extends Model {\n\n    title: string = \"\";\n\n    company_id = \"\";\n\n\n    public async getCompany(): Promise<Company> {\n\n\n        return (new Company()).getById(this.company_id) as Promise<Company>;\n    }\n\n    constructor() {\n        super(\"positions\");\n    }\n\n    public async getAllPositions(): Promise<Position[]> {\n        const results: Position[] = new Array();\n\n        let company = store.getters.currentCompany;\n\n        if (company) {\n\n            const modelCollection = this.firestore.collection(this.COLLECTION);\n            const records = await modelCollection.where(\"company_id\", \"==\", company.id)\n                // TODO .orderBy(\"updatedAt\", \"desc\")\n                .limit(20)\n                .get();\n\n\n\n            records.forEach(docSnapshot => {\n\n                let record = new Position();\n\n                Object.assign(record, docSnapshot.data());\n                record.id = docSnapshot.id;\n                results.push(record);\n\n            });\n        }\n        // console.info(`tasks:`);\n        // console.info(results);\n\n\n        return results\n    }\n\n\n}\n"],"sourceRoot":""}]}