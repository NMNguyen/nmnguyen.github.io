{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-2!/Volumes/Data/app.cloudjet.work/src/models/User.ts","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/models/User.ts","mtime":1557830879590},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832}],"contextDependencies":[],"result":["import _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport Model from \"./base\";\nimport Company from \"@/models/Company\"; // import Router from '../router';\n\nimport { store } from \"@/store/store\";\nexport var USER_ROLE = {\n  ADMIN: \"admin\",\n  EMPLOYEE: \"employee\"\n};\n\nvar User =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(User, _Model);\n\n  function User() {\n    var _this;\n\n    _classCallCheck(this, User);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(User).call(this, \"users\"));\n    _this.email = \"\";\n    _this.name = \"\";\n    _this.company_id = \"\";\n    _this.photoURL = \"\";\n    _this.team_id = \"\"; // mỗi user chỉ được thuộc 1 team duy nhất để tránh rắc rối không cần thiết\n    // teams: firebase.firestore.DocumentReference[] = [];\n\n    _this.messages = [];\n    _this.role = USER_ROLE.EMPLOYEE;\n    _this.photoName = \"\";\n    _this.signatureFlag = true;\n    _this.signatureHtml = \"\";\n    _this.meetingRemind = true;\n    _this.candidateAssign = true;\n    _this.taskAssign = true;\n    _this.taskDuel = true;\n    return _this;\n  }\n\n  _createClass(User, [{\n    key: \"getCompany\",\n    value: function () {\n      var _getCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", Company.instance.getById(this.company_id));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCompany() {\n        return _getCompany.apply(this, arguments);\n      }\n\n      return getCompany;\n    }() // public async getTeams(): Promise<Team[]> {\n    //     const result = [] as Team[];\n    //     for (const teamRef of this.teams) {\n    //         const response = await teamRef.get();\n    //         const team = Team.from(response.data()) as Team;\n    //         team.id = teamRef.id;\n    //         result.push(team);\n    //     }\n    //     return result;\n    // }\n\n  }, {\n    key: \"getCurrentUser\",\n    value: function () {\n      var _getCurrentUser = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", store.getters.currentUser);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getCurrentUser() {\n        return _getCurrentUser.apply(this, arguments);\n      }\n\n      return getCurrentUser;\n    }()\n  }, {\n    key: \"getAllUsers\",\n    value: function () {\n      var _getAllUsers = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(company_id) {\n        var results, records;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                results = [];\n                _context3.next = 3;\n                return this.collection().where(\"company_id\", \"==\", company_id).limit(20).get();\n\n              case 3:\n                records = _context3.sent;\n                records.forEach(function (docSnapshot) {\n                  var record = User.from(docSnapshot.data());\n                  record.id = docSnapshot.id;\n                  results.push(record);\n                });\n                return _context3.abrupt(\"return\", results);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAllUsers(_x) {\n        return _getAllUsers.apply(this, arguments);\n      }\n\n      return getAllUsers;\n    }() // override\n\n  }, {\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throw new TypeError(\"No implement yet!\");\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function insert() {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var modelCollection, result, id, model;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                modelCollection = this.firestore.collection(this.COLLECTION);\n                result = _objectSpread({}, this);\n                id = result['id'];\n                delete result['firestore'];\n                delete result['COLLECTION'];\n                delete result['id']; // const {TIMESTAMP} = firebase.database.ServerValue;\n\n                result.updatedAt = Date.now(); // @ts-ignore\n\n                _context5.next = 9;\n                return modelCollection.doc(id).set(JSON.parse(JSON.stringify(result), {\n                  merge: true\n                }));\n\n              case 9:\n                model = _context5.sent;\n                return _context5.abrupt(\"return\", this);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function update() {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }], [{\n    key: \"instance\",\n    get: function get() {\n      return new User();\n    }\n  }]);\n\n  return User;\n}(Model);\n\nexport { User as default };",{"version":3,"sources":["/Volumes/Data/app.cloudjet.work/src/models/User.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAP;AAEA,OAAO,OAAP,MAAoB,kBAApB,C,CACA;;AACA,SAAQ,KAAR,QAAoB,eAApB;AAKA,OAAO,IAAM,SAAS,GAAG;AACrB,EAAA,KAAK,EAAE,OADc;AAErB,EAAA,QAAQ,EAAE;AAFW,CAAlB;;IAKc,I;;;;;AAkBjB,kBAAA;AAAA;;AAAA;;AACI,8EAAM,OAAN;AAjBJ,UAAA,KAAA,GAAgB,EAAhB;AACA,UAAA,IAAA,GAAe,EAAf;AACA,UAAA,UAAA,GAAa,EAAb;AACA,UAAA,QAAA,GAAmB,EAAnB;AACA,UAAA,OAAA,GAAU,EAAV,CAYA,CAZc;AACd;;AACA,UAAA,QAAA,GAAmD,EAAnD;AACA,UAAA,IAAA,GAAuB,SAAS,CAAC,QAAjC;AACA,UAAA,SAAA,GAAoB,EAApB;AACA,UAAA,aAAA,GAAyB,IAAzB;AACA,UAAA,aAAA,GAAwB,EAAxB;AACA,UAAA,aAAA,GAAwB,IAAxB;AACA,UAAA,eAAA,GAA2B,IAA3B;AACA,UAAA,UAAA,GAAuB,IAAvB;AACA,UAAA,QAAA,GAAqB,IAArB;AAEA;AAEC;;;;;;;;;;;;iDAOU,OAAO,CAAC,QAAR,CAAiB,OAAjB,CAAyB,KAAK,UAA9B,C;;;;;;;;;;;;;;;QAGX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;kDAGW,KAAK,CAAC,OAAN,CAAc,W;;;;;;;;;;;;;;;;;;;;;gDAIA,U;;;;;;AACf,gBAAA,O,GAAkB,E;;uBAEF,KAAK,UAAL,GACjB,KADiB,CACX,YADW,EACG,IADH,EACS,UADT,EAEjB,KAFiB,CAEX,EAFW,EAGjB,GAHiB,E;;;AAAhB,gBAAA,O;AAKN,gBAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,WAAW,EAAG;AAC1B,sBAAI,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,WAAW,CAAC,IAAZ,EAAV,CAAb;AACA,kBAAA,MAAM,CAAC,EAAP,GAAY,WAAW,CAAC,EAAxB;AACA,kBAAA,OAAO,CAAC,IAAR,CAAa,MAAb;AACH,iBAJD;kDAKO,O;;;;;;;;;;;;;;;QAGX;;;;;;;;;;;;sBAEU,IAAI,SAAJ,CAAc,mBAAd,C;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,gBAAA,e,GAAkB,KAAK,SAAL,CAAe,UAAf,CAA0B,KAAK,UAA/B,C;AAEpB,gBAAA,M,qBAAa,I;AACb,gBAAA,E,GAAK,MAAM,CAAC,IAAD,C;AACf,uBAAO,MAAM,CAAC,WAAD,CAAb;AACA,uBAAO,MAAM,CAAC,YAAD,CAAb;AACA,uBAAO,MAAM,CAAC,IAAD,CAAb,C,CAEA;;AACA,gBAAA,MAAM,CAAC,SAAP,GAAmB,IAAI,CAAC,GAAL,EAAnB,C,CAEA;;;uBACoB,eAAe,CAAC,GAAhB,CAAoB,EAApB,EAAwB,GAAxB,CAA4B,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,MAAf,CAAX,EAAmC;AAAC,kBAAA,KAAK,EAAE;AAAR,iBAAnC,CAA5B,C;;;AAAd,gBAAA,K;kDAEC,I;;;;;;;;;;;;;;;;;;wBA5DQ;AACf,aAAO,IAAI,IAAJ,EAAP;AACH;;;;EAxB6B,K;;SAAb,I","sourcesContent":["import Model from './base';\nimport firebase from \"@/firebase\";\nimport Company from \"@/models/Company\";\n// import Router from '../router';\nimport {store} from \"@/store/store\";\nimport Team from \"@/models/Team\";\n\nexport type USER_ROLE_TYPE = \"admin\" | \"employee\";\n\nexport const USER_ROLE = {\n    ADMIN: \"admin\" as USER_ROLE_TYPE,\n    EMPLOYEE: \"employee\" as USER_ROLE_TYPE,\n};\n\nexport default class User extends Model {\n\n    email: string = \"\";\n    name: string = \"\";\n    company_id = \"\";\n    photoURL: string = \"\";\n    team_id = \"\"; // mỗi user chỉ được thuộc 1 team duy nhất để tránh rắc rối không cần thiết\n    // teams: firebase.firestore.DocumentReference[] = [];\n    messages: firebase.firestore.DocumentReference[] = [];\n    role: USER_ROLE_TYPE = USER_ROLE.EMPLOYEE;\n    photoName: string = \"\";\n    signatureFlag: boolean = true;\n    signatureHtml: string = \"\";\n    meetingRemind:boolean = true;\n    candidateAssign: boolean = true;\n    taskAssign:  boolean = true;\n    taskDuel:  boolean = true;\n\n    constructor() {\n        super(\"users\");\n    }\n\n    static get instance(): User {\n        return new User();\n    }\n\n    public async getCompany(): Promise<Company> {\n        return Company.instance.getById(this.company_id) as Promise<Company>;\n    }\n\n    // public async getTeams(): Promise<Team[]> {\n    //     const result = [] as Team[];\n    //     for (const teamRef of this.teams) {\n    //         const response = await teamRef.get();\n    //         const team = Team.from(response.data()) as Team;\n    //         team.id = teamRef.id;\n    //         result.push(team);\n    //     }\n    //     return result;\n    // }\n\n    public async getCurrentUser(): Promise<User> {\n        return store.getters.currentUser;\n    }\n\n\n    public async getAllUsers(company_id: string): Promise<User[]> {\n        const results: User[] = [];\n\n        const records = await this.collection()\n            .where(\"company_id\", \"==\", company_id)\n            .limit(20)\n            .get();\n\n        records.forEach(docSnapshot => {\n            let record = User.from(docSnapshot.data()) as User;\n            record.id = docSnapshot.id;\n            results.push(record);\n        });\n        return results\n    }\n\n    // override\n    async insert(): Promise<User> {\n        throw new TypeError(\"No implement yet!\");\n    }\n\n    async update(): Promise<User> {\n        const modelCollection = this.firestore.collection(this.COLLECTION);\n\n        let result = {...this};\n        let id = result['id'];\n        delete result['firestore'];\n        delete result['COLLECTION'];\n        delete result['id'];\n\n        // const {TIMESTAMP} = firebase.database.ServerValue;\n        result.updatedAt = Date.now();\n\n        // @ts-ignore\n        const model = await modelCollection.doc(id).set(JSON.parse(JSON.stringify(result), {merge: true}));\n\n        return this;\n    }\n}\n"],"sourceRoot":""}]}