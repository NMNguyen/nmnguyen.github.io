{"remainingRequest":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js!/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js!/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Data/app.cloudjet.work/src/components/modals/PinelineStage/AddEditPipeline.vue","mtime":1557830879574},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/thread-loader/dist/cjs.js","mtime":1557114467785},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/babel-loader/lib/index.js","mtime":1557114461372},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/ts-loader/index.js","mtime":1557114465832},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/cache-loader/dist/cjs.js","mtime":1557114467143},{"path":"/Volumes/Data/app.cloudjet.work/node_modules/vue-loader/lib/index.js","mtime":1557114467992}],"contextDependencies":[],"result":["import _objectSpread from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _classCallCheck from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Data/app.cloudjet.work/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport * as tslib_1 from \"tslib\";\nimport draggable from 'vuedraggable';\nimport Vue from \"vue\";\nimport { mapGetters, mapActions } from 'vuex';\nimport AddStageModal from \"./AddStageModal.vue\";\nimport Pipeline from \"@/models/Pipeline\";\nimport PipelineStage from \"@/models/PipelineStage\";\nimport { Component, Prop } from \"vue-property-decorator\";\nimport UnSavedChangeModal from '@/components/modals/PinelineStage/UnsavedChange.vue';\nimport { Getter, Action } from 'vuex-class';\n\nvar _ = require('lodash');\n\nvar AddEditPipeline =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(AddEditPipeline, _Vue);\n\n  function AddEditPipeline() {\n    var _this;\n\n    _classCallCheck(this, AddEditPipeline);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddEditPipeline).apply(this, arguments));\n    _this.showModalAddState = false;\n    _this.title = '';\n    _this.showModalUnSavedChange = false;\n    _this.drag = false;\n    _this.titleState = '';\n    _this.currentState = {};\n    _this.newPositionPipeline = {} || {};\n    _this.typeOfModalAddPipelineStage = 'new';\n    _this.isErrorInput = false;\n    _this.isProcessing = false;\n    _this.isSavedChange = false;\n    _this.cloneListPipelineStage = [];\n    return _this;\n  }\n\n  _createClass(AddEditPipeline, [{\n    key: \"changeIndexListStage\",\n    value: function changeIndexListStage() {\n      // let lengthDefaultStage = _.sumBy(this.cachePipeline.list_state, (stage) => {\n      //     return stage.index == 0;\n      // })\n      Object.freeze(this.listPipelineStage);\n      this.cachePipeline.list_state.map(function (stage, index) {\n        if (stage.index > 0) {\n          stage.index = index;\n        }\n\n        return stage;\n      });\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(_ref) {\n      var relatedContext = _ref.relatedContext,\n          draggedContext = _ref.draggedContext;\n      var relatedElement = relatedContext.element;\n      var draggedElement = draggedContext.element;\n      var indexRelatedElement = relatedElement.index;\n      var indexDraggedElement = draggedElement.index;\n      console.log(draggedElement.title, 'to', indexRelatedElement);\n      console.log(relatedElement.title, 'to', indexDraggedElement);\n      relatedElement.index = indexDraggedElement;\n      draggedElement.index = indexRelatedElement;\n      return (!relatedElement || !relatedElement.fixed) && !draggedElement.fixed;\n    }\n  }, {\n    key: \"dragOptions\",\n    value: function dragOptions() {\n      return {\n        animation: 0,\n        group: \"description\",\n        ghostClass: \"ghost\"\n      };\n    }\n  }, {\n    key: \"handleSaveChange\",\n    value: function handleSaveChange() {\n      this.showModalUnSavedChange = false;\n      this.isSavedChange = true;\n      this.saveChange();\n    }\n  }, {\n    key: \"handleCloseUnSavedChange\",\n    value: function handleCloseUnSavedChange() {\n      this.showModalUnSavedChange = false;\n      this.$emit('handleClose');\n    }\n  }, {\n    key: \"saveChange\",\n    value: function () {\n      var _saveChange = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.title.trim() == '')) {\n                  _context.next = 5;\n                  break;\n                }\n\n                this.isErrorInput = true;\n                return _context.abrupt(\"return\");\n\n              case 5:\n                this.isErrorInput = false;\n\n              case 6:\n                this.isProcessing = true;\n                _context.t0 = String(this.type);\n                _context.next = _context.t0 === 'new' ? 10 : _context.t0 === 'edit' ? 13 : 16;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return this.createNewPipeline();\n\n              case 12:\n                return _context.abrupt(\"break\", 16);\n\n              case 13:\n                _context.next = 15;\n                return this.editPipeline();\n\n              case 15:\n                return _context.abrupt(\"break\", 16);\n\n              case 16:\n                this.isProcessing = false;\n                this.isSavedChange = true;\n                _context.next = 20;\n                return this.handleCloseModal();\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function saveChange() {\n        return _saveChange.apply(this, arguments);\n      }\n\n      return saveChange;\n    }()\n  }, {\n    key: \"editPipeline\",\n    value: function editPipeline() {\n      var _this2 = this;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var pArray;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _this2.cachePipeline.title = _this2.title;\n\n                  _this2.changeIndexListStage();\n\n                  _context3.next = 4;\n                  return _this2.cachePipeline.list_state.map(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref3 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee2(stage) {\n                      var _newStage;\n\n                      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              if (!(stage.id == '')) {\n                                _context2.next = 8;\n                                break;\n                              }\n\n                              _newStage = new PipelineStage();\n                              Object.assign(_newStage, stage);\n                              _newStage.pipeline_id = _this2.currentPipeline.id;\n                              _context2.next = 6;\n                              return _newStage.insert().then(function (data) {\n                                stage.id = data.id;\n                                stage.pipeline_id = data['pipeline_id'];\n                              });\n\n                            case 6:\n                              _context2.next = 10;\n                              break;\n\n                            case 8:\n                              _context2.next = 10;\n                              return new PipelineStage().getById(stage.id).then(function (data) {\n                                Object.assign(data, stage);\n                                data['index'] = stage.index;\n\n                                if (data['title'] != stage.title) {\n                                  data['title'] = stage.title;\n                                }\n\n                                if (data['stage_type'] != stage.stage_type) {\n                                  data['stage_type'] = stage.stage_type;\n                                }\n\n                                data.update();\n                              });\n\n                            case 10:\n                              if (!(stage.deleted == true)) {\n                                _context2.next = 13;\n                                break;\n                              }\n\n                              _context2.next = 13;\n                              return new PipelineStage().getById(stage.id).then(function (data) {\n                                data.delete();\n                                console.log('Done ', stage.title);\n                              });\n\n                            case 13:\n                              return _context2.abrupt(\"return\", stage);\n\n                            case 14:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    return function (_x3) {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }());\n\n                case 4:\n                  pArray = _context3.sent;\n                  _context3.next = 7;\n                  return Promise.all(pArray);\n\n                case 7:\n                  _this2.cachePipeline.list_state = _this2.cachePipeline.list_state.filter(function (stage) {\n                    return !stage.deleted;\n                  });\n                  new Pipeline().getById(_this2.currentPipeline.id).then(function (data) {\n                    Object.assign(data, _this2.cachePipeline);\n                    delete data['list_state'];\n                    data.update().then(function (_data) {\n                      _this2.listPipeline.splice(_this2.index, 1, data);\n\n                      _this2.setListPipeline(_this2.listPipeline);\n\n                      resolve();\n                    });\n                  });\n\n                case 9:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"createNewPipeline\",\n    value: function createNewPipeline() {\n      var _this3 = this;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee6(resolve, reject) {\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _this3.newPositionPipeline = new Pipeline();\n\n                  _this3.changeIndexListStage();\n\n                  Object.assign(_this3.newPositionPipeline, _this3.cachePipeline);\n                  _this3.newPositionPipeline['title'] = _this3.title;\n                  delete _this3.newPositionPipeline['list_state']; //@ts-ignore\n\n                  _this3.newPositionPipeline.insert().then(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref5 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee5(data) {\n                      var pArray;\n                      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              pArray = _this3.cachePipeline.list_state.map(\n                              /*#__PURE__*/\n                              function () {\n                                var _ref6 = _asyncToGenerator(\n                                /*#__PURE__*/\n                                regeneratorRuntime.mark(function _callee4(stage) {\n                                  var _newStage;\n\n                                  return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                                    while (1) {\n                                      switch (_context4.prev = _context4.next) {\n                                        case 0:\n                                          if (stage.pipeline_id == '') stage.pipeline_id = data.id;\n\n                                          if (!((stage.id == '' || stage.pipeline_id == 'default') && !stage.deleted)) {\n                                            _context4.next = 7;\n                                            break;\n                                          }\n\n                                          _newStage = new PipelineStage();\n                                          Object.assign(_newStage, stage);\n                                          _newStage.pipeline_id = data.id;\n                                          _context4.next = 7;\n                                          return _newStage.insert().then(function (_data) {\n                                            stage.id = _data.id;\n                                          });\n\n                                        case 7:\n                                          return _context4.abrupt(\"return\", stage);\n\n                                        case 8:\n                                        case \"end\":\n                                          return _context4.stop();\n                                      }\n                                    }\n                                  }, _callee4);\n                                }));\n\n                                return function (_x7) {\n                                  return _ref6.apply(this, arguments);\n                                };\n                              }());\n                              _context5.next = 3;\n                              return Promise.all(pArray);\n\n                            case 3:\n                              //@ts-ignore\n                              _this3.newPositionPipeline.update().then(function (data) {\n                                var _array = _this3.listPipeline.concat(data);\n\n                                _this3.setListPipeline(_array);\n\n                                resolve();\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n\n                    return function (_x6) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }());\n\n                case 6:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        return function (_x4, _x5) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"_getAllStages\",\n    value: function () {\n      var _getAllStages2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(type) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", new PipelineStage().getAllStages(type));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function _getAllStages(_x8) {\n        return _getAllStages2.apply(this, arguments);\n      }\n\n      return _getAllStages;\n    }()\n  }, {\n    key: \"handleOpenModal\",\n    value: function () {\n      var _handleOpenModal = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8() {\n        var _this4 = this;\n\n        var _data;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _data = {};\n                this.isErrorInput = false; // this.changeIndexListStage();\n                // Use cloneDeep cuz remove Observer Property in Object.\n\n                if (!(String(this.type) == 'new')) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _data = {\n                  company_id: this.currentCompany.id,\n                  list_state: _.cloneDeep(this.listPipelineStage),\n                  title: ''\n                };\n                this.cloneListPipelineStage = _.cloneDeep(this.listPipelineStage);\n                this.title = '';\n                _context8.next = 12;\n                break;\n\n              case 8:\n                _context8.next = 10;\n                return this._getAllStages(this.currentPipeline.id).then(function (data) {\n                  _data = {\n                    company_id: _this4.currentCompany.id,\n                    list_state: data\n                  };\n                  _this4.title = _this4.currentPipeline.title;\n                  _this4.cloneListPipelineStage = _.cloneDeep(data);\n                });\n\n              case 10:\n                _context8.next = 12;\n                return this.setListStageToPipeline({\n                  id: this.currentPipeline.id,\n                  content: _data['list_state']\n                });\n\n              case 12:\n                _context8.next = 14;\n                return this.setCachePipeline(_data);\n\n              case 14:\n                _context8.next = 16;\n                return console.log(_data);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handleOpenModal() {\n        return _handleOpenModal.apply(this, arguments);\n      }\n\n      return handleOpenModal;\n    }()\n  }, {\n    key: \"removePipelineStage\",\n    value: function removePipelineStage(index) {\n      this.cachePipeline.list_state[index]['deleted'] = true;\n      this.cachePipeline.list_state.splice(index, 1, this.cachePipeline.list_state[index]);\n      this.setCachePipeline(this.cachePipeline);\n    }\n  }, {\n    key: \"handleOpenModalAddStage\",\n    value: function handleOpenModalAddStage(type, state, index) {\n      this.showModalAddState = true;\n      this.typeOfModalAddPipelineStage = type;\n\n      if (type == 'new') {\n        this.currentState = null;\n        this.titleState = '';\n      } else {\n        this.currentState = state; // indexInCurrentArray is position of this item in list_state of state\n\n        this.currentState['indexInCurrentArray'] = index;\n        this.titleState = this.currentState['title'];\n      }\n    }\n  }, {\n    key: \"handleCloseModal\",\n    value: function handleCloseModal() {\n      var compareTitle = '';\n      var compareStage = false;\n\n      if (!this.isSavedChange) {\n        this.cloneListPipelineStage.forEach(function (stage) {\n          delete stage['firestore'];\n          delete stage['updatedAt'];\n          delete stage['createdAt'];\n        });\n        var checkArray = [];\n\n        if (this.type == 'new') {\n          compareTitle = this.cachePipeline.title;\n          checkArray = _.cloneDeep(this.cachePipeline.list_state);\n          checkArray.forEach(function (stage) {\n            delete stage['firestore'];\n            delete stage['updatedAt'];\n            delete stage['createdAt'];\n          });\n          compareStage = _.isMatch(this.cloneListPipelineStage, checkArray);\n        } else {\n          compareTitle = this.currentPipeline.title;\n          checkArray = _.cloneDeep(this.currentPipeline.list_state);\n          checkArray.forEach(function (stage) {\n            delete stage['firestore'];\n            delete stage['updatedAt'];\n            delete stage['createdAt'];\n          });\n          console.log(this.cloneListPipelineStage);\n          compareStage = _.isMatch(this.cloneListPipelineStage, checkArray, _.isEqual);\n        } // Compare\n\n\n        if (!compareStage || this.title != compareTitle) {\n          this.showModalUnSavedChange = true;\n          return;\n        }\n      }\n\n      this.showModalUnSavedChange = false;\n      this.title = '';\n      this.isSavedChange = false;\n      this.$emit('handleClose');\n    }\n  }]);\n\n  return AddEditPipeline;\n}(Vue);\n\ntslib_1.__decorate([Prop(Boolean)], AddEditPipeline.prototype, \"showModal\", void 0);\n\ntslib_1.__decorate([Prop(String)], AddEditPipeline.prototype, \"type\", void 0);\n\ntslib_1.__decorate([Prop(Number)], AddEditPipeline.prototype, \"index\", void 0);\n\ntslib_1.__decorate([Getter('cachePipeline')], AddEditPipeline.prototype, \"cachePipeline\", void 0);\n\ntslib_1.__decorate([Getter('currentPipeline')], AddEditPipeline.prototype, \"currentPipeline\", void 0);\n\ntslib_1.__decorate([Getter('listPipeline')], AddEditPipeline.prototype, \"listPipeline\", void 0);\n\ntslib_1.__decorate([Getter('listPipelineStage')], AddEditPipeline.prototype, \"listPipelineStage\", void 0);\n\ntslib_1.__decorate([Getter('currentCompany')], AddEditPipeline.prototype, \"currentCompany\", void 0);\n\ntslib_1.__decorate([Action('setListStage')], AddEditPipeline.prototype, \"setListStage\", void 0);\n\ntslib_1.__decorate([Action('setListPipeline')], AddEditPipeline.prototype, \"setListPipeline\", void 0);\n\ntslib_1.__decorate([Action('setCachePipeline')], AddEditPipeline.prototype, \"setCachePipeline\", void 0);\n\ntslib_1.__decorate([Action('setCurrentPipeline')], AddEditPipeline.prototype, \"setCurrentPipeline\", void 0);\n\ntslib_1.__decorate([Action('setListStageToPipeline')], AddEditPipeline.prototype, \"setListStageToPipeline\", void 0);\n\nAddEditPipeline = tslib_1.__decorate([Component({\n  components: {\n    UnSavedChangeModal: UnSavedChangeModal,\n    AddStageModal: AddStageModal,\n    draggable: draggable\n  },\n  computed: _objectSpread({}, mapGetters(['currentCompany', 'listPipelineStage', 'listPipeline', 'cachePipeline', 'currentPipeline']), {\n    disabledInputTitle: function disabledInputTitle() {\n      var that = this;\n      return that.type == 'edit' && that.currentPipeline.is_default == true;\n    }\n  }),\n  methods: _objectSpread({}, mapActions('action', ['setListPipelineStage', 'setListPipeline', 'setCachePipeline', 'setCurrentPipeline']))\n})], AddEditPipeline);\nexport default AddEditPipeline;",null]}